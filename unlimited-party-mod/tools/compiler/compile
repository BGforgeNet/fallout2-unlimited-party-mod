#!/usr/bin/ruby

# compile - Compiler for Fallout script files.
# Copyright (C) 2003 Noid
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

#
# compile: generated by racc (runtime embedded)
#

###### racc/parser.rb

unless $".index 'racc/parser.rb' then
$".push 'racc/parser.rb'

type.module_eval <<'..end /usr/lib/ruby/1.6/racc/parser.rb modeval..id0b63d5c3b1', '/usr/lib/ruby/1.6/racc/parser.rb', 1
#
# parser.rb
#
#   Copyright (c) 1999-2001 Minero Aoki <aamine@loveruby.net>
#
#   This program is free software.
#   You can distribute/modify this program under the same terms of ruby.
#
#   As a special exception, when this code is copied by Racc
#   into a Racc output file, you may use that output file
#   without restriction.
#
#   $Id: parser.rb,v 1.42 2001/11/30 06:17:33 aamine Exp $
#

module Racc
  class ParseError < StandardError; end
end
unless defined? ParseError then
  ParseError = Racc::ParseError
end

unless defined? NotImplementedError then
  NotImplementedError = NotImplementError
end


module Racc

  class Parser

    private


    begin
      if defined? Racc_Debug_Ruby_Parser then
        raise LoadError, 'debugging ruby version runtime routine'
      end
      require 'racc/cparse'
      unless new.respond_to? :_racc_do_parse_c, true then
        raise LoadError, 'old cparse.so'
      end
      Racc_Main_Parsing_Routine = :_racc_do_parse_c
      Racc_YY_Parse_Method      = :_racc_yyparse_c
      Racc_c_parser_revision    = Racc_c_parser_id.split(/\s+/)[2]
    rescue LoadError
      Racc_Main_Parsing_Routine = :_racc_do_parse_rb
      Racc_YY_Parse_Method      = :_racc_yyparse_rb
    end

    Racc_ruby_parser_version = '1.4.1'
    Racc_ruby_parser_revision = '$Id: parser.rb,v 1.42 2001/11/30 06:17:33 aamine Exp $'.split(/\s+/)[2]

    Racc_parser_version = Racc_ruby_parser_version
    Racc_parser_revision = Racc_ruby_parser_revision

    def self.racc_runtime_type
      if Racc_Main_Parsing_Routine == :_racc_do_parse_c then
        'c'
      else
        'ruby'
      end
    end


    def _racc_setup
      t = self.type

      unless t::Racc_debug_parser then
        @yydebug = false
      end
      @yydebug = false unless defined? @yydebug

      if @yydebug then
        @racc_debug_out = $stderr unless defined? @racc_debug_out
        @racc_debug_out ||= $stderr
      end

      arg = t::Racc_arg
      if arg.size < 14 then
        arg[13] = true
      end
      arg
    end

    def _racc_init_sysvars
      @racc_state = [ 0 ]
      @racc_tstack = []
      @racc_vstack = []

      @racc_t = nil
      @racc_val = nil

      @racc_read_next = true

      @racc_user_yyerror = false
      @racc_error_status = 0
    end


    ###
    ### do_parse
    ###

    def do_parse
      __send__ Racc_Main_Parsing_Routine, _racc_setup(), false
    end

    def next_token
      raise NotImplementedError, "#{self.type}\#next_token is not defined"
    end

    def _racc_do_parse_rb( arg, in_debug )
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg

      _racc_init_sysvars
      tok = act = i = nil
      nerr = 0


      catch( :racc_end_parse ) {
      while true do

        if i = action_pointer[ @racc_state[-1] ] then
          if @racc_read_next then
            if @racc_t != 0 then   # not EOF
              tok, @racc_val = next_token()
              unless tok then   # EOF
                @racc_t = 0
              else
                @racc_t = (token_table[tok] or 1)   # error token
              end
              racc_read_token( @racc_t, tok, @racc_val ) if @yydebug

              @racc_read_next = false
            end
          end
          i += @racc_t
          if i >= 0 and act = action_table[i] and
             action_check[i] == @racc_state[-1] then
            ;
          else
            act = action_default[ @racc_state[-1] ]
          end
        else
          act = action_default[ @racc_state[-1] ]
        end

        while act = _racc_evalact( act, arg ) do end

      end
      }
    end


    ###
    ### yyparse
    ###

    def yyparse( recv, mid )
      __send__ Racc_YY_Parse_Method, recv, mid, _racc_setup(), true
    end

    def _racc_yyparse_rb( recv, mid, arg, c_debug )
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg

      _racc_init_sysvars
      tok = nil
      act = nil
      i = nil
      nerr = 0


      catch( :racc_end_parse ) {
        until i = action_pointer[ @racc_state[-1] ] do
          while act = _racc_evalact(
                  action_default[ @racc_state[-1] ], arg ) do end
        end

        recv.__send__( mid ) do |tok, val|
# $stderr.puts "rd: tok=#{tok}, val=#{val}"
          unless tok then
            @racc_t = 0
          else
            @racc_t = (token_table[tok] or 1)   # error token
          end
          @racc_val = val
          @racc_read_next = false

          i += @racc_t
          if i >= 0 and act = action_table[i] and
             action_check[i] == @racc_state[-1] then
# $stderr.puts "01: act=#{act}"
          else
            act = action_default[ @racc_state[-1] ]
# $stderr.puts "02: act=#{act}"
# $stderr.puts "curstate=#{@racc_state[-1]}"
          end

          while act = _racc_evalact( act, arg ) do end

          while not (i = action_pointer[ @racc_state[-1] ]) or
                not @racc_read_next or
                @racc_t == 0 do   # $
            if i and i += @racc_t and
               i >= 0 and
               act = action_table[i] and
               action_check[i] == @racc_state[-1] then
# $stderr.puts "03: act=#{act}"
              ;
            else
# $stderr.puts "04: act=#{act}"
              act = action_default[ @racc_state[-1] ]
            end

            while act = _racc_evalact( act, arg ) do end
          end
        end
      }
    end


    ###
    ### common
    ###

    def _racc_evalact( act, arg )
# $stderr.puts "ea: act=#{act}"
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg
nerr = 0   # tmp

      if act > 0 and act < shift_n then
        #
        # shift
        #

        if @racc_error_status > 0 then
          @racc_error_status -= 1 unless @racc_t == 1   # error token
        end

        @racc_vstack.push @racc_val
        @racc_state.push act
        @racc_read_next = true

        if @yydebug then
          @racc_tstack.push @racc_t
          racc_shift( @racc_t, @racc_tstack, @racc_vstack )
        end

      elsif act < 0 and act > -reduce_n then
        #
        # reduce
        #

        code = catch( :racc_jump ) {
          @racc_state.push _racc_do_reduce( arg, act )
          false
        }
        if code then
          case code
          when 1 # yyerror
            @racc_user_yyerror = true   # user_yyerror
            return -reduce_n
          when 2 # yyaccept
            return shift_n
          else
            raise RuntimeError, '[Racc Bug] unknown jump code'
          end
        end

      elsif act == shift_n then
        #
        # accept
        #

        racc_accept if @yydebug
        throw :racc_end_parse, @racc_vstack[0]

      elsif act == -reduce_n then
        #
        # error
        #

        case @racc_error_status
        when 0
          unless arg[21] then   # user_yyerror
            nerr += 1
            on_error @racc_t, @racc_val, @racc_vstack
          end
        when 3
          if @racc_t == 0 then   # is $
            throw :racc_end_parse, nil
          end
          @racc_read_next = true
        end
        @racc_user_yyerror = false
        @racc_error_status = 3

        while true do
          if i = action_pointer[ @racc_state[-1] ] then
            i += 1   # error token
            if i >= 0 and
               (act = action_table[i]) and
               action_check[i] == @racc_state[-1]  then
               break
            end
          end

          throw :racc_end_parse, nil if @racc_state.size < 2
          @racc_state.pop
          @racc_vstack.pop
          if @yydebug then
            @racc_tstack.pop
            racc_e_pop( @racc_state, @racc_tstack, @racc_vstack )
          end
        end

        return act

      else
        raise RuntimeError, "[Racc Bug] unknown action #{act.inspect}"
      end

      racc_next_state( @racc_state[-1], @racc_state ) if @yydebug

      nil
    end

    def _racc_do_reduce( arg, act )
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg
      state = @racc_state
      vstack = @racc_vstack
      tstack = @racc_tstack

      i = act * -3
      len       = reduce_table[i]
      reduce_to = reduce_table[i+1]
      method_id = reduce_table[i+2]
      void_array = []

      tmp_t = tstack[ -len, len ] if @yydebug
      tmp_v = vstack[ -len, len ]
      tstack[ -len, len ] = void_array if @yydebug
      vstack[ -len, len ] = void_array
      state[ -len, len ]  = void_array

      # tstack must be updated AFTER method call
      if use_result then
        vstack.push __send__(method_id, tmp_v, vstack, tmp_v[0])
      else
        vstack.push __send__(method_id, tmp_v, vstack)
      end
      tstack.push reduce_to

      racc_reduce( tmp_t, reduce_to, tstack, vstack ) if @yydebug

      k1 = reduce_to - nt_base
      if i = goto_pointer[ k1 ] then
        i += state[-1]
        if i >= 0 and (curstate = goto_table[i]) and goto_check[i] == k1 then
          return curstate
        end
      end
      goto_default[ k1 ]
    end

    def on_error( t, val, vstack )
      raise ParseError, sprintf("\nparse error on value %s (%s)",
                                val.inspect,
                                token_to_str(t) || '?')
    end

    def yyerror
      throw :racc_jump, 1
    end

    def yyaccept
      throw :racc_jump, 2
    end

    def yyerrok
      @racc_error_status = 0
    end


    # for debugging output

    def racc_read_token( t, tok, val )
      @racc_debug_out.print 'read    '
      @racc_debug_out.print tok.inspect, '(', racc_token2str(t), ') '
      @racc_debug_out.puts val.inspect
      @racc_debug_out.puts
    end

    def racc_shift( tok, tstack, vstack )
      @racc_debug_out.puts "shift   #{racc_token2str tok}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_reduce( toks, sim, tstack, vstack )
      out = @racc_debug_out
      out.print 'reduce '
      if toks.empty? then
        out.print ' <none>'
      else
        toks.each {|t| out.print ' ', racc_token2str(t) }
      end
      out.puts " --> #{racc_token2str(sim)}"
          
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_accept
      @racc_debug_out.puts 'accept'
      @racc_debug_out.puts
    end

    def racc_e_pop( state, tstack, vstack )
      @racc_debug_out.puts 'error recovering mode: pop token'
      racc_print_states state
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_next_state( curstate, state )
      @racc_debug_out.puts  "goto    #{curstate}"
      racc_print_states state
      @racc_debug_out.puts
    end

    def racc_print_stacks( t, v )
      out = @racc_debug_out
      out.print '        ['
      t.each_index do |i|
        out.print ' (', racc_token2str(t[i]), ' ', v[i].inspect, ')'
      end
      out.puts ' ]'
    end

    def racc_print_states( s )
      out = @racc_debug_out
      out.print '        ['
      s.each {|st| out.print ' ', st }
      out.puts ' ]'
    end

    def racc_token2str( tok )
      type::Racc_token_to_s_table[tok] or
        raise RuntimeError, "[Racc Bug] can't convert token #{tok} to string"
    end

    def token_to_str( t )
      type::Racc_token_to_s_table[t]
    end

  end

end
..end /usr/lib/ruby/1.6/racc/parser.rb modeval..id0b63d5c3b1
end   # end of racc/parser.rb


type.module_eval <<'..end compile.rb modeval..ida644cbea7f', 'compile.rb', 1
# Execute the following command to compile the compiler.
#     racc -g -E -e ruby -o compile compile.y


#####
# The base class for all nodes created by the parser.
#
class ParseNode
  # Compiles the given node and returns a list of OpcodeNodes.
  def compile(script, procedure)
  end

  def parse_error(str)
    puts "Error on line #{@line_num}: #{str}"
    exit 1
  end
  private :parse_error
end

class AddRegionNode < ParseNode
  def initialize(line_num, name, points)
    @line_num = line_num
    @name = name
    @point_nodes = points
  end

  def compile(script, procedure)
    list = []
    list.concat(@name.compile(script, procedure))
    @point_nodes.each { |n| list.concat(n.compile(script, procedure)) }
    list.push(OpcodeNode.new(0xc001, @point_nodes.length + 1))
    list.push(OpcodeNode.new(0x807f))
    list
  end
end

class AsmNode < ParseNode
  def initialize(line_num, opcode)
    @line_num = line_num
    @opcode = opcode
  end

  def compile(script, procedure)
    [OpcodeNode.new(@opcode)]
  end
end

class AsmExprNode < ParseNode
  def initialize(line_num, expr)
    @line_num = line_num
    @expr = expr
  end

  def compile(script, procedure)
    @expr.compile(script, procedure)
  end
end

class AsmSymNode < ParseNode
  def initialize(line_num, val)
    @line_num = line_num
    @value = value
  end

  def compile(script, procedure)
    [OpcodeNode.new(0x9001, value)]
  end
end

class BitwiseNotNode < ParseNode
  def initialize(line_num, value)
    @line_num = line_num
    @value_node = value
  end

  def compile(script, procedure)
    @value_node.compile(script, procedure) + [OpcodeNode.new(0x8043)]
  end
end

class CallInNode < ParseNode
  def initialize(line_num, name, delay)
    @line_num = line_num
    @name = name
    @delay_node = delay
  end

  def compile(script, procedure)
    if not script.procedure?(@name)
      parse_error "procedure `#{@name}' used before definition."
    elsif script.procedure(@name).num_params.nonzero?
      parse_error "procedure `#{@name}' can not be used in call in as " +
                  "it expects arguments."
    end

    list = []
    list.concat(@delay_node.compile(script, procedure))
    list.push(OpcodeNode.new(0xc001, script.procedure_id(@name)))
    list.push(OpcodeNode.new(0x8006))
    list
  end
end

class CallStmtProcedureNode < ParseNode
  def initialize(line_num, name, args)
    @line_num = line_num
    @name = name
    @args = args
  end

  def compile(script, procedure)
    num_args = 0
    if script.procedure?(@name)
      num_args = script.procedure(@name).num_params
    elsif script.op_procedure?(@name)
      parse_error "don't use `call' with procedure `#{@name}'."
    else
      parse_error "procedure `#{@name}' used before definition."
    end

    if @args.length != num_args
      parse_error "wrong number of arguments.\n" +
                  "  `#{@name}' expects #{num_args} but #{@args.length} given."
    end

    list = []

    jmp_after = OpcodeNode.new(0xc001, 0)
    call_node = OpcodeNode.new(0x8005)
    jmp_after.link_to_prev = call_node

    list.push(jmp_after)
    list.push(OpcodeNode.new(0x800d))
    @args.each { |a| list.concat(a.compile(script, procedure)) }
    list.push(OpcodeNode.new(0xc001, @args.length))
    list.push(OpcodeNode.new(0xc001, script.procedure_id(@name)))
    list.push(call_node)
    list.push(OpcodeNode.new(0x801a))
    list
  end
end

class CallWhenNode < ParseNode
  def initialize(line_num, name, expr)
    @line_num = line_num
    @name = name
    @expr_node = expr
  end

  def compile(script, procedure)
    if not script.procedure?(@name)
      parse_error "procedure `#{@name}' used before definition."
    end
    if script.procedure(@name).num_params.nonzero?
      parse_error "procedure `#{@name}' can not be used in call when as " +
                  "it expects arguments."
    end

    skip_expr = OpcodeNode.new(0xc001, 0)
    start_expr = OpcodeNode.new(0x8002, 0)
    jmp_start_expr = OpcodeNode.new(0xc001, 0)
    jmp_start_expr.link = start_expr
    skip_expr.link = jmp_start_expr

    list = []
    list.push(skip_expr)
    list.push(OpcodeNode.new(0x8004))
    list.push(start_expr)
    list.concat(@expr_node.compile(script, procedure))
    list.push(OpcodeNode.new(0x8003))
    list.push(OpcodeNode.new(0x8011))
    list.push(jmp_start_expr)
    list.push(OpcodeNode.new(0xc001, script.procedure_id(@name)))
    list.push(OpcodeNode.new(0x8007))
    list
  end
end

class ExprProcedureNode < ParseNode
  def initialize(line_num, name, args)
    @line_num = line_num
    @name = name
    @args = args
  end

  def compile(script, procedure)
    is_call_procedure = false
    if script.procedure?(@name)
      is_call_procedure = true
      num_args = script.procedure(@name).num_params
    elsif script.op_procedure?(@name)
      if not script.op_procedure_has_return_value?(@name)
        parse_error "`#{@name}' does not return a value."
      end
      num_args = script.op_procedure_num_params(@name)
    else
      parse_error "procedure `#{@name}' used before definition."
    end

    if @args.length != num_args
      parse_error "wrong number of arguments.\n" +
                  "  `#{@name}' expects #{num_args} but #{@args.length} given."
    end

    list = []

    if is_call_procedure
      jmp_after = OpcodeNode.new(0xc001, 0)
      call_node = OpcodeNode.new(0x8005)
      jmp_after.link_to_prev = call_node

      list.push(jmp_after)
      list.push(OpcodeNode.new(0x800d))
      @args.each { |a| list.concat(a.compile(script, procedure)) }
      list.push(OpcodeNode.new(0xc001, @args.length))
      list.push(OpcodeNode.new(0xc001, script.procedure_id(@name)))
      list.push(call_node)
    else
      @args.each { |a| list.concat(a.compile(script, procedure)) }
      list.push(OpcodeNode.new(script.op_procedure_opcode(@name)))
    end
    list
  end
end

class FetchNode < ParseNode
  def initialize(line_num, var_name)
    @line_num = line_num
    @var_name = var_name
  end

  def compile(script, procedure)
    if (id = procedure.local_var_id(@var_name)) != nil
      [OpcodeNode.new(0xc001, id), OpcodeNode.new(0x8032)]
    elsif (id = script.script_var_id(@var_name)) != nil
      [OpcodeNode.new(0xc001, id), OpcodeNode.new(0x8012)]
    elsif (id = script.external_var_id(@var_name)) != nil
      [OpcodeNode.new(0x9001, id), OpcodeNode.new(0x8014)]
    elsif (id = script.procedure?(@var_name)) != false
      parse_error "append `()' to procedure name to call it."
    else
      parse_error "variable `#{@var_name}' used before definition."
    end
  end
end

class IfNode < ParseNode
  def initialize(line_num, expr_node, if_stmt_nodes, else_stmt_nodes = nil)
    @line_num = line_num
    @expr_node = expr_node
    @if_stmt_nodes = if_stmt_nodes
    @else_stmt_nodes = else_stmt_nodes
  end

  def compile(script, procedure)
    if @else_stmt_nodes.nil?
      if_opcode_nodes(script, procedure)
    else
      if_else_opcode_nodes(script, procedure)
    end
  end

  def if_opcode_nodes(script, procedure)
    jmp_out = OpcodeNode.new(0xc001, 0)
    expr = @expr_node.compile(script, procedure)

    stmts = []
    @if_stmt_nodes.each { |n| stmts.concat(n.compile(script, procedure)) }

    jmp_out.link_to_prev = stmts.last

    list = []
    list.push(jmp_out)
    list.concat(expr)
    list.push(OpcodeNode.new(0x802f))
    list.concat(stmts)
    list
  end
  def if_else_opcode_nodes(script, procedure)
    jmp_else = OpcodeNode.new(0xc001, 0)
    expr = @expr_node.compile(script, procedure)

    if_stmts = []
    @if_stmt_nodes.each { |n| if_stmts.concat(n.compile(script, procedure)) }

    else_stmts = []
    @else_stmt_nodes.each {|n| else_stmts.concat(n.compile(script, procedure)) }

    jmp_out = OpcodeNode.new(0xc001, 0)
    jmp_out.link_to_prev = else_stmts.last
    branch = OpcodeNode.new(0x8004)
    jmp_else.link_to_prev = branch

    list = []
    list.push(jmp_else)
    list.concat(expr)
    list.push(OpcodeNode.new(0x802f))
    list.concat(if_stmts)
    list.push(jmp_out)
    list.push(branch)
    list.concat(else_stmts)
    list
  end
end

class IndirectCallProcedureNode < ParseNode
  def initialize(line_num, expr, args)
    @line_num = line_num
    @expr = expr
    @args = args
  end

  def compile(script, procedure)
    jmp_after = OpcodeNode.new(0xc001, 0)
    call_node = OpcodeNode.new(0x8005)
    jmp_after.link_to_prev = call_node

    list = []
    list.push(jmp_after)
    list.push(OpcodeNode.new(0x800d))
    @args.each { |a| list.concat(a.compile(script, procedure)) }
    list.push(OpcodeNode.new(0xc001, @args.length))
    list.concat(@expr.compile(script, procedure))
    list.push(OpcodeNode.new(0x8028))
    list.push(OpcodeNode.new(0x801b))
    list.push(OpcodeNode.new(0xc001, 0))
    list.push(OpcodeNode.new(0x8027))
    list.push(call_node)
    list
  end
end

class InfixNode < ParseNode
  def initialize(line_num, op, node1, node2)
    @line_num = line_num
    @op = op
    @node1 = node1
    @node2 = node2
  end

  def compile(script, procedure)
    list = []
    list.concat(@node1.compile(script, procedure))
    list.concat(@node2.compile(script, procedure))
    list.push(OpcodeNode.new(@op))
    list
  end
end

class LogicalNotNode < ParseNode
  def initialize(line_num, value)
    @line_num = line_num
    @value_node = value
  end

  def compile(script, procedure)
    @value_node.compile(script, procedure) + [OpcodeNode.new(0x8045)]
  end
end

class OpStmtProcedureNode < ParseNode
  def initialize(line_num, name, args)
    @line_num = line_num
    @name = name
    @args = args
  end

  def compile(script, procedure)
    num_args = 0
    if script.procedure?(@name)
      parse_error "`call' required before procedure name `#{@name}'."
    elsif script.op_procedure?(@name)
      num_args = script.op_procedure_num_params(@name)
    else
      parse_error "procedure `#{@name}' used before definition."
    end

    if @args.length != num_args
      parse_error "wrong number of arguments.\n" +
                  "  `#{@name}' expects #{num_args} but #{@args.length} given."
    end

    list = []
    @args.each { |a| list.concat(a.compile(script, procedure)) }
    list.push(OpcodeNode.new(script.op_procedure_opcode(@name)))
    if script.op_procedure_has_return_value?(@name)
      list.push(OpcodeNode.new(0x801a))
    end

    list
  end
end

class ProcedureNumberNode < ParseNode
  def initialize(line_num, procedure_name)
    @line_num = line_num
    @name = procedure_name
  end

  def compile(script, procedure)
    [OpcodeNode.new(0xc001, script.procedure_id(@name))]
  end
end

class ReturnNode < ParseNode
  def initialize(line_num, expr)
    @line_num = line_num
    @expr_node = expr
  end

  def compile(script, procedure)
    list = []
    list.concat(@expr_node.compile(script, procedure))
    list.push(OpcodeNode.new(0x800d))
    list.push(OpcodeNode.new(0x8019))
    list.push(OpcodeNode.new(0x802a))
    list.push(OpcodeNode.new(0x8029))
    list.push(OpcodeNode.new(0x800c))
    list.push(OpcodeNode.new(0x8003)) if procedure.critical?
    list.push(OpcodeNode.new(0x801c))
    list
  end
end

class StoreNode < ParseNode
  def initialize(line_num, var_name, value)
    @line_num = line_num
    @var_name = var_name
    @value_node = value
  end

  def compile(script, procedure)
    list = @value_node.compile(script, procedure)
    if (id = procedure.local_var_id(@var_name)) != nil
      list.push(OpcodeNode.new(0xc001, id), OpcodeNode.new(0x8031))
    elsif (id = script.script_var_id(@var_name)) != nil
      list.push(OpcodeNode.new(0xc001, id), OpcodeNode.new(0x8013))
    elsif (id = script.external_var_id(@var_name)) != nil
      list.push(OpcodeNode.new(0x9001, id), OpcodeNode.new(0x8015))
    else
      raise "internal error"
    end
    list
  end
end

class UminusNode < ParseNode
  def initialize(line_num, value)
    @line_num = line_num
    @value_node = value
  end

  def compile(script, procedure)
    @value_node.compile(script, procedure) + [OpcodeNode.new(0x8046)]
  end
end

class ValueNode < ParseNode
  def initialize(line_num, value)
    @line_num = line_num
    @value = value
  end

  def compile(script, procedure)
    [script.opcode_node_for_value(@value)]
  end
end

class VoidNode < ParseNode
  def initialize(line_num, node)
    @line_num = line_num
    @node = node
  end

  def compile(script, procedure)
    @node.compile(script, procedure) + [OpcodeNode.new(0x801a)]
  end
end

class WhileNode < ParseNode
  def initialize(line_num, expr_node, stmt_nodes)
    @line_num = line_num
    @expr_node = expr_node
    @stmt_nodes = stmt_nodes
  end

  def compile(script, procedure)
    jmp_out = OpcodeNode.new(0xc001, 0)
    expr = @expr_node.compile(script, procedure)

    stmts = []
    @stmt_nodes.each { |n| stmts.concat(n.compile(script, procedure)) }

    jmp_again = OpcodeNode.new(0xc001, 0)
    jmp_again.link = expr[0]
    branch = OpcodeNode.new(0x8004)
    jmp_out.link_to_prev = branch

    list = []
    list.push(jmp_out)
    list.concat(expr)
    list.push(OpcodeNode.new(0x8030))
    list.concat(stmts)
    list.push(jmp_again)
    list.push(branch)
    list
  end
end


#####
# A mixin for IO stream that provides functionality to write floats and ints.
#
module IOWriter
  def write_float(val)
    str = val.to_a.pack("g")
    write(str)
  end

  def write_uint16(val)
    str = val.to_a.pack("n")
    write(str)
  end

  def write_uint32(val)
    str = val.to_a.pack("N")
    write(str)
  end
end

#####
# A node representing a single opcode.  A node may link to another node
# via the @link or @link_to_prev fields.  For @link, the value of this
# node is the offset of the linked to node.  For @link_to_prev, the value
# of this node is the offset of the node *after* the linked to node.
#
class OpcodeNode
  def initialize(opcode, value = nil)
    if value.nil? and (opcode == 0x9001 or opcode == 0xa001 or opcode == 0xc001)
      raise sprintf("opcode %x must be given a value", opcode)
    end

    @opcode = opcode
    @value = value
    @offset = 0
    if (opcode == 0x9001 or opcode == 0xa001 or opcode == 0xc001)
      @size = 6
    else
      @size = 2
    end

    @link = nil
    @link_to_prev = nil
  end

  attr_reader :opcode, :value, :size
  attr_accessor :offset, :link, :link_to_prev

  # Writes this node to the output stream
  def write(io)
    resolve_link_addr

    io.write_uint16(@opcode)
    case @opcode
      when 0x9001  ;  io.write_uint32(@value)
      when 0xa001  ;  io.write_float(@value)
      when 0xc001  ;  io.write_uint32(@value)
    end
  end

  #-----------------
  private

  # If this opcode node has any links, then the offset of the linked
  # node is copied into the value of this node.
  def resolve_link_addr
    if @opcode == 0xc001 and @link != nil
      @value = @link.offset
      @link = nil
    elsif @opcode == 0xc001 and @link_to_prev != nil
      @value = @link_to_prev.offset + @link_to_prev.size
      @link_to_prev = nil
    end
  end
end

#####
# A Symbol table contains a list of symbols (strings) and the offsets that
# they occur at.
#
class SymTable
  def initialize
    @symbols = {}            # hash of offset to symbol name
    @offsets = {}            # hash of symbol name to offset (reverse of above)
    @list = []               # list of all symbols in order of addition
    @offset = 4              # number of bytes required to store table
                             # +4 is for initial int specifying the size
  end

  # Size of the symbol table in bytes, when writing to an .int file.
  def size
    # +4 on non empty tables is for the terminating int.
    @list.length == 0 ? @offset : @offset + 4
  end

  # Returns whether the table includes the given symbol or not
  def include?(sym)
    @offsets.has_key?(sym.downcase)
  end

  # Adds the given entry to the symbol table if it isn't already added.
  def add(sym)
    unless include?(sym)
      @list.push(sym)                  # remember order of addition

      @offset += 2                     # +2 for length field

      # store mapping
      @offsets[sym.downcase] = @offset
      @symbols[@offset] = sym

      # name needs to be null terminated, plus total length must be even
      len = (sym.length % 2).zero? ? sym.length + 2 : sym.length + 1

      # increase size by length of string
      @offset += len
    end
  end

  # Returns the offset for the given symbol
  def offset(sym)
    @offsets[sym.downcase]
  end

  # Returns the symbol stored at the given offset
  def symbol(offset)
    @symbols[offset]
  end

  # Iterate over each entry in the table.
  def each(&block)
    @list.each(&block)
  end

  # Write the symbol table to the given output stream.  The stream is
  # expected to be of type IntWriter.
  def write(io)
    if @symbols.size > 0
      io.write_uint32(@offset - 4)
      each { |sym| write_sym_string(io, sym) }
    end
    # flag termination
    io.write_uint32(0xffffffff)
  end

  #---------------------------
  private

  def write_sym_string(io, str)
    # null terminate string ..
    str = str + "\0"
    # .. and pad so that total length is even
    str += "\0" unless (str.length % 2).zero?

    # write length of string followed by string
    io.write_uint16(str.length)
    io.write(str)
  end
end

#####
# A procedure defined in the script.
#
class Procedure
  IMPORT   = 0x04
  EXPORT   = 0x08
  CRITICAL = 0x10

  def initialize(script, name, num_params, *flags)
    @script = script
    @name, @num_params = name, num_params
    @is_critical, @is_imported, @is_exported = false
    set_flags(0, *flags)
    @compiled_nodes = nil
    @addr = 0
    @lvars = []
    @lvar_names = []
  end

  def critical?
    @is_critical
  end
  def imported?
    @is_imported
  end
  def exported?
    @is_exported
  end

  # Returns the id of the given local variable.
  def local_var_id(name)
    @lvar_names.index(name)
  end

  # Returns the flags for this procedure.
  def flags
    val = 0
    val |= CRITICAL if @is_critical
    val |= IMPORT if @is_imported
    val |= EXPORT if @is_exported
    val
  end

  # Sets the parameter names, and local variable names / values.
  def set_vars(line_num, params, vars)
    @lvar_names = params
    vars.each do |name, value|
      if @lvar_names.include?(name)
        @script.parse_error(line_num, "variable `#{name}' shadows parameter.")
      end
      @lvar_names.push(name)
    end
    @lvars = vars
  end

  # Sets the parse nodes for the procedure body
  def set_nodes(line_num, pnodes)
    if not @compiled_nodes.nil?
      @script.parse_error(line_num, "procedure `#{@name}' is already defined.")
    end

    list = []
    # header
    list.push(OpcodeNode.new(0x802b))

    # local variable values
    @lvars.each do |el|
      name, value = el
      list.push(@script.opcode_node_for_value(value))
    end

    # compile procedure body
    pnodes.each { |n| list.concat(n.compile(@script, self)) }

    # default return(0)
    list.push(OpcodeNode.new(0xc001, 0))
    list.push(OpcodeNode.new(0x800d))
    list.push(OpcodeNode.new(0x8019))
    list.push(OpcodeNode.new(0x802a))
    list.push(OpcodeNode.new(0x8029))
    list.push(OpcodeNode.new(0x800c))
    list.push(OpcodeNode.new(0x8003)) if critical?
    list.push(OpcodeNode.new(0x801c))

 ##   # clear all local variables
 ##   @lvar_names.length.times do |i|
 ##     list.push(OpcodeNode.new(0xc001, 0))
 ##     list.push(OpcodeNode.new(0xc001, i))
 ##     list.push(OpcodeNode.new(0x8031))
 ##   end

    # cleanup
    list.push(OpcodeNode.new(0x802a))
    list.push(OpcodeNode.new(0x8029))
    list.push(OpcodeNode.new(0x8003)) if critical?
    list.push(OpcodeNode.new(0x801c))

    @compiled_nodes = list
  end

  # Sets the flags associated with this procedure.
  def set_flags(line_num, *flags)
    if flags.include?(:CRITICAL)
      @is_critical = true
    end

    if flags.include?(:IMPORT)
      if @is_exported or flags.include?(:EXPORT)
        parse_error(line_num, "procedure `#{@name}' can not be both " +
                    "imported and exported.")
      else
        @is_imported = true
      end
    end

    if flags.include?(:EXPORT)
      if @is_imported or flags.include?(:IMPORT)
        parse_error(line_num, "procedure `#{name}' can not be both " +
                    "imported and exported.")
      else
        @is_exported = true
      end
    end
  end

  attr_reader :name, :num_params, :compiled_nodes
  attr_accessor :addr
end


#####
# A script compiler.  The parser will add procedures and variables to
# this compiler, which this class will turn into a compiled script.
#
class ScriptCompiler
  def initialize(version)
    @labels = SymTable.new
    @strings = SymTable.new
    @procedures = Array.new

    @script_vars = Array.new
    @imported_vars = Array.new
    @exported_vars = Array.new

    @ops = InternalOps.new

    # each script contains this as the first procedure
    add_procedure(0, "..............", 0)
  end

  # Notifies the user of the error that occured at the specifed line,
  # then exits.
  def parse_error(line_num, str)
    puts "Error on line #{line_num}: #{str}"
    exit 1
  end

  ### -- Methods for setting script variables and procedures --

  # Adds a string to the symbol table.
  def add_string(sym)
    @strings.add(sym)
  end

  # Adds details for a procedure.
  def add_procedure(line_num, name, num_params, *flags)
    if procedure(name).nil?
      add_label(name)
      pr = Procedure.new(self, name, num_params, *flags)
      @procedures.push(pr)
    else
      parse_error(line_num, "redefinition of procedure `#{name}'")
    end
  end

  # Adds the definition for a procedure.  The procedure may have already
  # been declared by add_procedure().
  def add_procedure_defn(line_num, name, params, lvars, nodes, *flags)
    pr = procedure(name)
    if pr.nil?
      add_procedure(line_num, name, params.length, *flags)
      pr = procedure(name)
    else
      if params.length != pr.num_params
        parse_error(line_num, "procedure `#{name}' declared with " +
                    "#{pr.num_params} parameters\n" +
                    "but defined with #{num_params} parameters")
      end
      pr.set_flags(line_num, *flags)
    end
    pr.set_vars(line_num, params, lvars)
    pr.set_nodes(line_num, nodes)
  end

  # Adds a script variable.
  def add_script_variable(line_num, name, value)
    check_dup_vars(line_num, name)
    add_label(name)
    @script_vars.push([name, value])
  end

  # Adds an imported variable.
  def add_imported_variable(line_num, name)
    check_dup_vars(line_num, name)
    add_label(name)
    @imported_vars.push(name)
  end

  # Adds and exported variable.
  def add_exported_variable(line_num, name, value)
    check_dup_vars(line_num, name)
    add_label(name)
    @exported_vars.push([name, value])
  end


  ## -- Methods for querying script variables / procedures --

  # Returns the id of the given script variable, or nil if unknown.
  def script_var_id(name)
    @script_vars.each_with_index do |el, i|
      return i if name == el[0]
    end
    nil
  end

  # Returns the id of the given external variable, or nil if unknown.
  def external_var_id(name)
    if @imported_vars.include?(name) or @exported_vars.assoc(name)
      @labels.offset(name)
    else
      nil
    end
  end

  # Is the given procedure defined?
  def procedure?(name)
    @procedures.each { |p| return true if p.name.downcase == name.downcase }
    false
  end

  # Returns the given procedure.
  def procedure(name)
    @procedures.each { |p| return p if p.name.downcase == name.downcase }
    nil
  end

  # Returns the id of the given procedure.
  def procedure_id(name)
    @procedures.each_with_index do |p, i|
      return i if (p.name.downcase == name.downcase)
    end
    -1
  end

  # Returns whether the given name represents an internal procedure.
  def op_procedure?(name)
    @ops.procedure?(name.downcase)
  end

  # Returns the number of args required for the given internal procedure.
  def op_procedure_num_params(name)
    if(@ops.num_args(name.downcase) > 9)
      @ops.num_args(name.downcase) + 1
    else
      @ops.num_args(name.downcase)
    end
  end

  # Returns the opcode of the given internal procedure.
  def op_procedure_opcode(name)
    @ops.opcode(name.downcase)
  end

  # Returns if the procedure has a return value.
  def op_procedure_has_return_value?(name)
    @ops.has_return_value?(name.downcase)
  end

  # Returns a OpcodeNode that represents the given value.
  def opcode_node_for_value(value)
    if value.is_a? Integer
      return OpcodeNode.new(0xc001, value)
    elsif value.is_a? Float
      return OpcodeNode.new(0xa001, value)
    elsif value.is_a? String
      return OpcodeNode.new(0x9001, @strings.offset(value))
    else
      raise "Unsupported variable type `#{value.class}'"
    end
  end

  # Writes the compiled script to the given output stream.
  def write(io)
    io.extend IOWriter

    head_nodes = header()
    decl_nodes = declarations()

    # link header and declarations
    head_nodes[3].link = decl_nodes[0]

    calc_offsets(head_nodes, 0)
    delta = @labels.size + @strings.size + (24 * @procedures.length + 4)

    # calculate and set offsets of declarations
    offset = next_offset(head_nodes)
    calc_offsets(decl_nodes, offset + delta)

    offset = next_offset(decl_nodes)
    # first procedure has no body, but address is immediately after
    # var and proc declarations
    @procedures[0].addr = offset

    # calculate and set offsets for each procedure
    @procedures.each do |pr|
      nodes = pr.compiled_nodes
      if nodes != nil
        pr.addr = offset
        calc_offsets(nodes, offset)
        offset = next_offset(nodes)
      end
    end

    # write header
    write_nodes(io, head_nodes)

    # write procedure details
    io.write_uint32(@procedures.length)
    @procedures.each do |pr|
      io.write_uint32(@labels.offset(pr.name))
      io.write_uint32(pr.flags)
      io.write_uint32(0)
      io.write_uint32(0)
      io.write_uint32(pr.addr)
      io.write_uint32(pr.num_params)
    end

    # write label and string symbol tables
    @labels.write(io)
    @strings.write(io)

    # write declarations
    write_nodes(io, decl_nodes)

    # write each procedure
    @procedures.each do |pr|
      nodes = pr.compiled_nodes
      if nodes != nil
        write_nodes(io, nodes)
      end
    end
  end

  #-----------------
  private

  # Returns the header for the compiled script file.
  def header
    list = []
                                                             # Offsets
    list.push(OpcodeNode.new(0x8002))                        #  0
    list.push(OpcodeNode.new(0xc001, 18))                    #  2
    list.push(OpcodeNode.new(0x800d))                        #  8
    delta = @labels.size + @strings.size + (24 * @procedures.length + 4)
    list.push(OpcodeNode.new(0xc001, 42 + delta))            # 10
    list.push(OpcodeNode.new(0x8004))                        # 16
    list.push(OpcodeNode.new(0x8010))                        # 18
    list.push(OpcodeNode.new(0x801a))                        # 20
    list.push(OpcodeNode.new(0x8020))                        # 22
    list.push(OpcodeNode.new(0x801a))                        # 24
    list.push(OpcodeNode.new(0x8021))                        # 26
    list.push(OpcodeNode.new(0x801a))                        # 28
    list.push(OpcodeNode.new(0x8022))                        # 30
    list.push(OpcodeNode.new(0x801a))                        # 32
    list.push(OpcodeNode.new(0x8023))                        # 34
    list.push(OpcodeNode.new(0x8024))                        # 36
    list.push(OpcodeNode.new(0x8025))                        # 38
    list.push(OpcodeNode.new(0x8026))                        # 40
    list
  end

  # Returns the declarations for script variables and exported vars / procs.
  def declarations
    list = []
    list.push(OpcodeNode.new(0x802c))

    # values for all script variables
    @script_vars.each do |el|
      name, value = el
      list.push(opcode_node_for_value(value))
    end

    # declarations of exported variables
    @exported_vars.each do |el|
      name, value = el
      list.push(OpcodeNode.new(0x9001, @labels.offset(name)))
      list.push(OpcodeNode.new(0x8016))
    end

    # definitions of exported variables
    @exported_vars.each do |el|
      name, value = el
      list.push(opcode_node_for_value(value))
      list.push(OpcodeNode.new(0x9001, @labels.offset(name)))
      list.push(OpcodeNode.new(0x8015))
    end

    # declarations of exported procedures
    @procedures.each_with_index do |pr, i|
      if pr.exported?
        list.push(OpcodeNode.new(0xc001, pr.num_params))
        list.push(OpcodeNode.new(0xc001, i))      # procedure number
        list.push(OpcodeNode.new(0x8017))
      end
    end

    list.push(OpcodeNode.new(0xc001, 0))
    list.push(OpcodeNode.new(0x8003))

    # script entry point is start procedure
    node = OpcodeNode.new(0xc001, 18)
    func = procedure("start")
    if func != nil
      node.link = func.compiled_nodes[0]
    end
    list.push(node)
    list.push(OpcodeNode.new(0x8004))

    list
  end

  # Sets the correct offset for each node in the nodes list, starting from
  # the given initial offset.
  def calc_offsets(nodes, initial_offset)
    offset = initial_offset
    nodes.each do |n|
      n.offset = offset
      offset += n.size
    end
  end

  # Returns the offset immediately after the last node in the nodes list.
  def next_offset(nodes)
    last_node = nodes.last
    last_node.offset + last_node.size
  end

  # Writes a list of nodes to the given IO stream.
  def write_nodes(io, nodes)
    nodes.each { |n| n.write(io) }
  end


  # Adds the given label to the label symbol table.
  def add_label(sym)
    @labels.add(sym)
  end

  # Checks for redefinitions of a script / external variable.
  def check_dup_vars(line_num, name)
    if @script_vars.assoc(name) != nil
      parse_error(line_num, "redefinition of script variable `#{name}'.")
    end
    if @imported_vars.include?(name)
      parse_error(line_num, "variable `#{name}' is already imported, " +
                  "can not redefine.")
    end
    if @exported_vars.assoc(name) != nil
      parse_error(line_num, "variable `#{name}' is already exported, " +
                  "can not redefine.")
    end
  end
end

#####
# Class containing number of args and opcodes of all internal functions.
#
class InternalOps

  def procedure?(name)
    @procedures.has_key?(name)
  end

  def num_args(name)
    @procedures[name].at(0)
  end

  def opcode(name)
    @procedures[name].at(1)
  end

  def has_return_value?(name)
    @procedures[name].at(2)
  end

  
  def initialize
    @procedures = {
      "callstart"                       => [ 1, 0x8008, false ],
      "exec"                            => [ 1, 0x8009, false ],
      "spawn"                           => [ 1, 0x800a, false ],
      "fork"                            => [ 1, 0x800b, false ],
      "exit"                            => [ 0, 0x800e, false ],
      "detach"                          => [ 0, 0x800f, false ],
      "floor"                           => [ 1, 0x8044, true ],
      "wait"                            => [ 1, 0x8047, false ],
      "cancel"                          => [ 1, 0x8048, false ],
      "cancelall"                       => [ 0, 0x8049, false ],
      "startcritical"                   => [ 0, 0x804a, false ],
      "endcritical"                     => [ 0, 0x804b, false ],
      "sayquit"                         => [ 0, 0x804c, false ],
      "sayend"                          => [ 0, 0x804d, false ],
      "saystart"                        => [ 0, 0x804e, false ],
      "saystartpos"                     => [ 1, 0x804f, false ],
      "sayreplytitle"                   => [ 1, 0x8050, false ],
      "saygotoreply"                    => [ 1, 0x8051, false ],
      "sayreply"                        => [ 2, 0x8052, false ],
      "sayoption"                       => [ 2, 0x8053, false ],
      "saymessage"                      => [ 2, 0x8054, false ],
      "sayreplywindow"                  => [ 5, 0x8055, false ],
      "sayoptionwindow"                 => [ 5, 0x8056, false ],
      "sayborder"                       => [ 2, 0x8057, false ],
      "sayscrollup"                     => [ 6, 0x8058, false ],
      "sayscrolldown"                   => [ 6, 0x8059, false ],
      "sayspacing"                      => [ 1, 0x805a, false ],
      "sayoptioncolor"                  => [ 3, 0x805b, false ],
      "sayreplycolor"                   => [ 3, 0x805c, false ],
      "sayrestart"                      => [ 0, 0x805d, false ],
      "saygetlastpos"                   => [ 0, 0x805e, true ],
      "sayreplyflags"                   => [ 1, 0x805f, false ],
      "sayoptionflags"                  => [ 1, 0x8060, false ],
      "saymessagetimeout"               => [ 1, 0x8061, false ],
      "createwin"                       => [ 5, 0x8062, false ],
      "deletewin"                       => [ 1, 0x8063, false ],
      "selectwin"                       => [ 1, 0x8064, false ],
      "resizewin"                       => [ 5, 0x8065, false ],
      "scalewin"                        => [ 5, 0x8066, false ],
      "showwin"                         => [ 0, 0x8067, false ],
      "fillwin"                         => [ 3, 0x8068, false ],
      "fillrect"                        => [ 7, 0x8069, false ],
      "fillwin3x3"                      => [ 1, 0x806a, false ],
      "display"                         => [ 1, 0x806b, false ],
      "displaygfx"                      => [ 5, 0x806c, false ],
      "displayraw"                      => [ 1, 0x806d, false ],
      "loadpalettetable"                => [ 1, 0x806e, false ],
      "fadein"                          => [ 1, 0x806f, false ],
      "fadeout"                         => [ 1, 0x8070, false ],
      "gotoxy"                          => [ 2, 0x8071, false ],
      "print"                           => [ 1, 0x8072, false ],
      "format"                          => [ 6, 0x8073, false ],
      "printrect"                       => [ 3, 0x8074, false ],
      "setfont"                         => [ 1, 0x8075, false ],
      "settextflags"                    => [ 1, 0x8076, false ],
      "settextcolor"                    => [ 3, 0x8077, false ],
      "sethighlightcolor"               => [ 3, 0x8078, false ],
      "stopmovie"                       => [ 0, 0x8079, false ],
      "playmovie"                       => [ 1, 0x807a, false ],
      "movieflags"                      => [ 1, 0x807b, false ],
      "playmovierect"                   => [ 5, 0x807c, false ],
      "playmoviealpha"                  => [ 2, 0x807d, false ],
      "playmoviealpharect"              => [ 6, 0x807e, false ],
      ##################################################################################################"addregion"                       => [ 2, 0x807f, false ],
      "addregionflag"                   => [ 2, 0x8080, false ],
      "addregionproc"                   => [ 5, 0x8081, false ],
      "addregionrightproc"              => [ 3, 0x8082, false ],
      "deleteregion"                    => [ 1, 0x8083, false ],
      "activateregion"                  => [ 2, 0x8084, false ],
      "checkregion"                     => [ 1, 0x8085, true ],
      "addbutton"                       => [ 5, 0x8086, false ],
      "addbuttontext"                   => [ 2, 0x8087, false ],
      "addbuttonflag"                   => [ 2, 0x8088, false ],
      "addbuttongfx"                    => [ 4, 0x8089, false ],
      "addbuttonproc"                   => [ 5, 0x808a, false ],
      "addbuttonrightproc"              => [ 3, 0x808b, false ],
      "deletebutton"                    => [ 1, 0x808c, false ],
      "hidemouse"                       => [ 0, 0x808d, false ],
      "showmouse"                       => [ 0, 0x808e, false ],
      "mouseshape"                      => [ 3, 0x808f, false ],
      "refreshmouse"                    => [ 1, 0x8090, false ],
      "setglobalmousefunc"              => [ 4, 0x8091, false ],
      "addnamedevent"                   => [ 2, 0x8092, false ],
      "addnamedhandler"                 => [ 2, 0x8093, false ],
      "clearnamed"                      => [ 1, 0x8094, false ],
      "signalnamed"                     => [ 1, 0x8095, false ],
      "addkey"                          => [ 2, 0x8096, false ],
      "deletekey"                       => [ 1, 0x8097, false ],
      "soundplay"                       => [ 2, 0x8098, true ],
      "soundpause"                      => [ 1, 0x8099, false ],
      "soundresume"                     => [ 1, 0x809a, false ],
      "soundstop"                       => [ 1, 0x809b, false ],
      "soundrewind"                     => [ 1, 0x809c, false ],
      "sounddelete"                     => [ 1, 0x809d, false ],
      "setoneoptpause"                  => [ 1, 0x809e, false ],
      "selectfilelist"                  => [ 2, 0x809f, true ],
      "tokenize"                        => [ 3, 0x80a0, true ],
      "op_give_exp_points"              => [ 1, 0x80a1, false ],
      "op_scr_return"                   => [ 1, 0x80a2, false ],
      "op_play_sfx"                     => [ 1, 0x80a3, false ],
      "op_obj_name"                     => [ 1, 0x80a4, true ],
      "op_sfx_build_open_name"          => [ 2, 0x80a5, true ],
      "op_get_pc_stat"                  => [ 1, 0x80a6, true ],
      "op_tile_contains_pid_obj"        => [ 3, 0x80a7, true ],
      "op_set_map_start"                => [ 4, 0x80a8, false ],
      "op_override_map_start"           => [ 4, 0x80a9, false ],
      "op_has_skill"                    => [ 2, 0x80aa, true ],
      "op_using_skill"                  => [ 2, 0x80ab, true ],
      "op_roll_vs_skill"                => [ 3, 0x80ac, true ],
      "op_skill_contest"                => [ 3, 0x80ad, true ],
      "op_do_check"                     => [ 3, 0x80ae, true ],
      "op_is_success"                   => [ 1, 0x80af, true ],
      "op_is_critical"                  => [ 1, 0x80b0, true ],
      "op_how_much"                     => [ 0, 0x80b1, true ],
      "op_mark_area_known"              => [ 3, 0x80b2, false ],
      "op_reaction_influence"           => [ 3, 0x80b3, true ],
      "op_random"                       => [ 2, 0x80b4, true ],
      "op_roll_dice"                    => [ 2, 0x80b5, true ],
      "op_move_to"                      => [ 3, 0x80b6, true ],
      "op_create_object_sid"            => [ 4, 0x80b7, true ],
      "op_display_msg"                  => [ 1, 0x80b8, false ],
      "op_script_overrides"             => [ 0, 0x80b9, false ],
      "op_obj_is_carrying_obj_pid"      => [ 2, 0x80ba, true ],
      "op_tile_contains_obj_pid"        => [ 3, 0x80bb, true ],
      "op_self_obj"                     => [ 0, 0x80bc, true ],
      "op_source_obj"                   => [ 0, 0x80bd, true ],
      "op_target_obj"                   => [ 0, 0x80be, true ],
      "op_dude_obj"                     => [ 0, 0x80bf, true ],
      "op_obj_being_used_with"          => [ 0, 0x80c0, true ],
      "op_local_var"                    => [ 1, 0x80c1, true ],
      "op_set_local_var"                => [ 2, 0x80c2, false ],
      "op_map_var"                      => [ 1, 0x80c3, true ],
      "op_set_map_var"                  => [ 2, 0x80c4, false ],
      "op_global_var"                   => [ 1, 0x80c5, true ],
      "op_set_global_var"               => [ 2, 0x80c6, false ],
      "op_script_action"                => [ 0, 0x80c7, true ],
      "op_obj_type"                     => [ 1, 0x80c8, true ],
      "op_obj_item_subtype"             => [ 1, 0x80c9, true ],
      "op_get_critter_stat"             => [ 2, 0x80ca, true ],
      "op_set_critter_stat"             => [ 3, 0x80cb, true ],
      "op_animate_stand_obj"            => [ 1, 0x80cc, false ],
      "op_animate_stand_reverse_obj"    => [ 1, 0x80cd, false ],
      "op_animate_move_obj_to_tile"     => [ 3, 0x80ce, false ],
      "op_tile_in_tile_rect"            => [ 5, 0x80cf, true ],
      "op_attack_complex"               => [ 8, 0x80d0, false ],
      "op_make_daytime"                 => [ 0, 0x80d1, false ],
      "op_tile_distance"                => [ 2, 0x80d2, true ],
      "op_tile_distance_objs"           => [ 2, 0x80d3, true ],
      "op_tile_num"                     => [ 1, 0x80d4, true ],
      "op_tile_num_in_direction"        => [ 3, 0x80d5, true ],
      "op_pickup_obj"                   => [ 1, 0x80d6, false ],
      "op_drop_obj"                     => [ 1, 0x80d7, false ],
      "op_add_obj_to_inven"             => [ 2, 0x80d8, false ],
      "op_rm_obj_from_inven"            => [ 2, 0x80d9, false ],
      "op_wield_obj_critter"            => [ 2, 0x80da, false ],
      "op_use_obj"                      => [ 1, 0x80db, false ],
      "op_obj_can_see_obj"              => [ 2, 0x80dc, true ],
      "op_attack"                       => [ 8, 0x80dd, false ],
      "op_start_gdialog"                => [ 5, 0x80de, false ],
      "op_end_dialogue"                 => [ 0, 0x80df, false ],
      "op_dialogue_reaction"            => [ 1, 0x80e0, false ],
      "op_metarule3"                    => [ 4, 0x80e1, true ],
      "op_set_map_music"                => [ 2, 0x80e2, false ],
      "op_set_obj_visibility"           => [ 2, 0x80e3, false ],
      "op_load_map"                     => [ 2, 0x80e4, false ],
      "op_wm_area_set_pos"              => [ 3, 0x80e5, false ],
      "op_set_exit_grids"               => [ 5, 0x80e6, false ],
      "op_anim_busy"                    => [ 1, 0x80e7, true ],
      "op_critter_heal"                 => [ 2, 0x80e8, true ],
      "op_set_light_level"              => [ 1, 0x80e9, false ],
      "op_game_time"                    => [ 0, 0x80ea, true ],
      "op_game_time_in_seconds"         => [ 0, 0x80eb, true ],
      "op_elevation"                    => [ 1, 0x80ec, true ],
      "op_kill_critter"                 => [ 2, 0x80ed, false ],
      "op_kill_critter_type"            => [ 2, 0x80ee, false ],
      "op_critter_dmg"                  => [ 3, 0x80ef, false ],
      "op_add_timer_event"              => [ 3, 0x80f0, false ],
      "op_rm_timer_event"               => [ 1, 0x80f1, false ],
      "op_game_ticks"                   => [ 1, 0x80f2, true ],
      "op_has_trait"                    => [ 3, 0x80f3, true ],
      "op_destroy_object"               => [ 1, 0x80f4, false ],
      "op_obj_can_hear_obj"             => [ 2, 0x80f5, true ],
      "op_game_time_hour"               => [ 0, 0x80f6, true ],
      "op_fixed_param"                  => [ 0, 0x80f7, true ],
      "op_tile_is_visible"              => [ 1, 0x80f8, true ],
      "op_dialogue_system_enter"        => [ 0, 0x80f9, false ],
      "op_action_being_used"            => [ 0, 0x80fa, true ],
      "op_critter_state"                => [ 1, 0x80fb, true ],
      "op_game_time_advance"            => [ 1, 0x80fc, false ],
      "op_radiation_inc"                => [ 2, 0x80fd, false ],
      "op_radiation_dec"                => [ 2, 0x80fe, false ],
      "op_critter_attempt_placement"    => [ 3, 0x80ff, true ],
      "op_obj_pid"                      => [ 1, 0x8100, true ],
      "op_cur_map_index"                => [ 0, 0x8101, true ],
      "op_critter_add_trait"            => [ 4, 0x8102, true ],
      "op_critter_rm_trait"             => [ 4, 0x8103, true ],
      "op_proto_data"                   => [ 2, 0x8104, true ],
      "op_message_str"                  => [ 2, 0x8105, true ],
      "op_critter_inven_obj"            => [ 2, 0x8106, true ],
      "op_obj_set_light_level"          => [ 3, 0x8107, false ],           
      "op_world_map"                    => [ 0, 0x8108, false ],
      "op_inven_cmds"                   => [ 3, 0x8109, true ],
      "op_float_msg"                    => [ 3, 0x810a, false ],
      "op_metarule"                     => [ 2, 0x810b, true ],
      "op_anim"                         => [ 3, 0x810c, false ],
      "op_obj_carrying_pid_obj"         => [ 2, 0x810d, true ],
      "op_reg_anim_func"                => [ 2, 0x810e, false ],
      "op_reg_anim_animate"             => [ 3, 0x810f, false ],
      "op_reg_anim_animate_reverse"     => [ 3, 0x8110, false ],
      "op_reg_anim_obj_move_to_obj"     => [ 3, 0x8111, false ],
      "op_reg_anim_obj_run_to_obj"      => [ 3, 0x8112, false ],
      "op_reg_anim_obj_move_to_tile"    => [ 3, 0x8113, false ],
      "op_reg_anim_obj_run_to_tile"     => [ 3, 0x8114, false ],
      "op_play_gmovie"                  => [ 1, 0x8115, false ],
      "op_add_mult_objs_to_inven"       => [ 3, 0x8116, false ],
      "op_rm_mult_objs_from_inven"      => [ 3, 0x8117, true ],
      "op_get_month"                    => [ 0, 0x8118, true ],
      "op_get_day"                      => [ 0, 0x8119, true ],
      "op_explosion"                    => [ 3, 0x811a, false ],
      "op_days_since_visited"           => [ 0, 0x811b, true ],
      "op_gsay_start"                   => [ 0, 0x811c, false ],
      "op_gsay_end"                     => [ 0, 0x811d, false ],
      "op_gsay_reply"                   => [ 2, 0x811e, false ],
      "op_gsay_option"                  => [ 4, 0x811f, false ],
      "op_gsay_message"                 => [ 3, 0x8120, false ],
      "op_giq_option"                   => [ 5, 0x8121, false ],
      "op_poison"                       => [ 2, 0x8122, false ],
      "op_get_poison"                   => [ 1, 0x8123, true ],
      "op_party_add"                    => [ 1, 0x8124, false ],
      "op_party_remove"                 => [ 1, 0x8125, false ],
      "op_reg_anim_animate_forever"     => [ 2, 0x8126, false ],
      "op_critter_injure"               => [ 2, 0x8127, false ],
      "op_combat_is_initialized"        => [ 0, 0x8128, true ],
      "op_gdialog_mod_barter"           => [ 1, 0x8129, false ],
      "op_difficulty_level"             => [ 0, 0x812a, true ],
      "op_running_burning_guy"          => [ 0, 0x812b, true ],
      "op_inven_unwield"                => [ 0, 0x812c, false ],
      "op_obj_is_locked"                => [ 1, 0x812d, true ],
      "op_obj_lock"                     => [ 1, 0x812e, false ],
      "op_obj_unlock"                   => [ 1, 0x812f, false ],
      "op_obj_is_open"                  => [ 1, 0x8130, true ],
      "op_obj_open"                     => [ 1, 0x8131, false ],
      "op_obj_close"                    => [ 1, 0x8132, false ],
      "op_game_ui_disable"              => [ 0, 0x8133, false ],
      "op_game_ui_enable"               => [ 0, 0x8134, false ],
      "op_game_ui_is_disabled"          => [ 0, 0x8135, true ],
      "op_gfade_out"                    => [ 1, 0x8136, false ],
      "op_gfade_in"                     => [ 1, 0x8137, false ],
      "op_item_caps_total"              => [ 1, 0x8138, true ],
      "op_item_caps_adjust"             => [ 2, 0x8139, true ],
      "op_anim_action_frame"            => [ 2, 0x813a, true ],
      "op_reg_anim_play_sfx"            => [ 3, 0x813b, false ],
      "op_critter_mod_skill"            => [ 3, 0x813c, false ],
      "op_sfx_build_char_name"          => [ 3, 0x813d, true ],
      "op_sfx_build_ambient_name"       => [ 1, 0x813e, true ],
      "op_sfx_build_interface_name"     => [ 1, 0x813f, true ],
      "op_sfx_build_item_name"          => [ 1, 0x8140, true ],
      "op_sfx_build_weapon_name"        => [ 4, 0x8141, true ],
      "op_sfx_build_scenery_name"       => [ 3, 0x8142, true ],
      "op_attack_setup"                 => [ 2, 0x8143, false ],
      "op_destroy_mult_objs"            => [ 2, 0x8144, true ],
      "op_use_obj_on_obj"               => [ 2, 0x8145, false ],
      "op_endgame_slideshow"            => [ 0, 0x8146, false ],
      "op_move_obj_inven_to_obj"        => [ 2, 0x8147, false ],
      "op_endgame_movie"                => [ 0, 0x8148, false ],
      "op_obj_art_fid"                  => [ 1, 0x8149, true ],
      "op_art_anim"                     => [ 1, 0x814a, true ],
      "op_party_member_obj"             => [ 1, 0x814b, true ],
      "op_rotation_to_tile"             => [ 2, 0x814c, true ],
      "op_jam_lock"                     => [ 1, 0x814d, false ],
      "op_gdialog_set_barter_mod"       => [ 1, 0x814e, false ],
      "op_combat_difficulty"            => [ 0, 0x814f, true ],
      "op_obj_on_screen"                => [ 1, 0x8150, true ],
      "op_critter_is_fleeing"           => [ 1, 0x8151, true ],
      "op_critter_set_flee_state"       => [ 2, 0x8152, false ],
      "op_terminate_combat"             => [ 0, 0x8153, false ],
      "op_debug_msg"                    => [ 1, 0x8154, false ],
      "op_critter_stop_attacking"       => [ 1, 0x8155, false ],

      ###sfall op codes###
      "op_read_byte"                    => [ 1, 0x8156, true ],
      "op_read_short"                   => [ 1, 0x8157, true ],
      "op_read_int"                     => [ 1, 0x8158, true ],
      "op_read_string"                  => [ 1, 0x8159, true ],
      "op_write_byte"                   => [ 2, 0x81cf, false ],
      "op_write_short"                  => [ 2, 0x81d0, false ],
      "op_write_int"                    => [ 2, 0x81d1, false ],
      "op_write_string"                 => [ 2, 0x821b, false ],
      "op_call_offset_v0"               => [ 1, 0x81d2, false ],
      "op_call_offset_v1"               => [ 2, 0x81d3, false ],
      "op_call_offset_v2"               => [ 3, 0x81d4, false ],
      "op_call_offset_v3"               => [ 4, 0x81d5, false ],
      "op_call_offset_v4"               => [ 5, 0x81d6, false ],
      "op_call_offset_r0"               => [ 1, 0x81d7, true ],
      "op_call_offset_r1"               => [ 2, 0x81d8, true ],
      "op_call_offset_r2"               => [ 3, 0x81d9, true ],
      "op_call_offset_r3"               => [ 4, 0x81da, true ],
      "op_call_offset_r4"               => [ 5, 0x81db, true ],
      "op_set_pc_base_stat"             => [ 2, 0x815a, false ],
      "op_set_pc_extra_stat"            => [ 2, 0x815b, false ],
      "op_get_pc_base_stat"             => [ 1, 0x815c, true ],
      "op_get_pc_extra_stat"            => [ 1, 0x815d, true ],
      "op_set_critter_base_stat"        => [ 3, 0x815e, false ],
      "op_set_critter_extra_stat"       => [ 3, 0x815f, false ],
      "op_get_critter_base_stat"        => [ 2, 0x8160, true ],
      "op_get_critter_extra_stat"       => [ 2, 0x8161, true ],
      "op_set_stat_max"                 => [ 2, 0x81b4, false ],
      "op_set_stat_min"                 => [ 2, 0x81b5, false ],
      "op_set_pc_stat_max"              => [ 2, 0x81b7, false ],
      "op_set_pc_stat_min"              => [ 2, 0x81b8, false ],
      "op_set_npc_stat_max"             => [ 2, 0x81b9, false ],
      "op_set_npc_stat_min"             => [ 2, 0x81ba, false ],
      "op_input_funcs_available"        => [ 0, 0x816b, true ],
      "op_key_pressed"                  => [ 1, 0x816c, true ],
      "op_tap_key"                      => [ 1, 0x8162, false ],
      "op_get_mouse_x"                  => [ 0, 0x821c, true ],
      "op_get_mouse_y"                  => [ 0, 0x821d, true ],
      "op_get_mouse_buttons"            => [ 0, 0x821e, true ],
      "op_get_window_under_mouse"       => [ 0, 0x821f, true ],
      "op_get_year"                     => [ 0, 0x8163, true ],
      "op_game_loaded"                  => [ 0, 0x8164, true ],
      "op_graphics_funcs_available"     => [ 0, 0x8165, true ],
      "op_load_shader"                  => [ 1, 0x8166, true ],
      "op_free_shader"                  => [ 1, 0x8167, false ],
      "op_activate_shader"              => [ 1, 0x8168, false ],
      "op_deactivate_shader"            => [ 1, 0x8169, false ],
      "op_set_shader_int"               => [ 3, 0x816d, false ],
      "op_set_shader_float"             => [ 3, 0x816e, false ],
      "op_set_shader_vector"            => [ 6, 0x816f, false ],
      "op_get_shader_version"           => [ 0, 0x81ad, true ],
      "op_set_shader_mode"              => [ 2, 0x81ae, false ],
      "op_force_graphics_refresh"       => [ 1, 0x81b0, false ],
      "op_get_shader_texture"           => [ 2, 0x81b1, true ],
      "op_set_shader_texture"           => [ 3, 0x81b2, false ],
      "op_set_global_script_repeat"     => [ 1, 0x816a, false ],
      "op_set_global_script_type"       => [ 1, 0x819b, false ],
      "op_available_global_script_types"=> [ 0, 0x819c, true ],
      "op_in_world_map"                 => [ 0, 0x8170, true ],
      "op_force_encounter"              => [ 1, 0x8171, false ],
      "op_force_encounter_with_flags"   => [ 2, 0x8229, false ],
      "op_set_map_time_multi"           => [ 1, 0x822a, false ],
      "op_set_world_map_pos"            => [ 2, 0x8172, false ],
      "op_get_world_map_x_pos"          => [ 0, 0x8173, true ],
      "op_get_world_map_y_pos"          => [ 0, 0x8174, true ],
      "op_set_dm_model"                 => [ 1, 0x8175, false ],
      "op_set_df_model"                 => [ 1, 0x8176, false ],
      "op_set_movie_path"               => [ 2, 0x8177, false ],
      "op_set_perk_image"               => [ 2, 0x8178, false ],
      "op_set_perk_ranks"               => [ 2, 0x8179, false ],
      "op_set_perk_level"               => [ 2, 0x817a, false ],
      "op_set_perk_stat"                => [ 2, 0x817b, false ],
      "op_set_perk_stat_mag"            => [ 2, 0x817c, false ],
      "op_set_perk_skill1"              => [ 2, 0x817d, false ],
      "op_set_perk_skill1_mag"          => [ 2, 0x817e, false ],
      "op_set_perk_type"                => [ 2, 0x817f, false ],
      "op_set_perk_skill2"              => [ 2, 0x8180, false ],
      "op_set_perk_skill2_mag"          => [ 2, 0x8181, false ],
      "op_set_perk_str"                 => [ 2, 0x8182, false ],
      "op_set_perk_per"                 => [ 2, 0x8183, false ],
      "op_set_perk_end"                 => [ 2, 0x8184, false ],
      "op_set_perk_chr"                 => [ 2, 0x8185, false ],
      "op_set_perk_int"                 => [ 2, 0x8186, false ],
      "op_set_perk_agl"                 => [ 2, 0x8187, false ],
      "op_set_perk_lck"                 => [ 2, 0x8188, false ],
      "op_set_perk_name"                => [ 2, 0x8189, false ],
      "op_set_perk_desc"                => [ 2, 0x818a, false ],
      "op_set_pipboy_available"         => [ 1, 0x818b, false ],
      "op_get_kill_counter"             => [ 1, 0x818c, true ],
      "op_mod_kill_counter"             => [ 2, 0x818d, false ],
      "op_get_perk_owed"                => [ 0, 0x818e, true ],
      "op_set_perk_owed"                => [ 1, 0x818f, false ],
      "op_get_perk_available"           => [ 1, 0x8190, true ],
      "op_get_critter_current_ap"       => [ 1, 0x8191, true ],
      "op_set_critter_current_ap"       => [ 2, 0x8192, false ],
      "op_active_hand"                  => [ 0, 0x8193, true ],
      "op_toggle_active_hand"           => [ 0, 0x8194, false ],
      "op_set_weapon_knockback"         => [ 3, 0x8195, false ],
      "op_set_target_knockback"         => [ 3, 0x8196, false ],
      "op_set_attacker_knockback"       => [ 3, 0x8197, false ],
      "op_remove_weapon_knockback"      => [ 1, 0x8198, false ],
      "op_remove_target_knockback"      => [ 1, 0x8199, false ],
      "op_remove_attacker_knockback"    => [ 1, 0x819a, false ],
      "op_set_sfall_global"             => [ 2, 0x819d, false ],
      "op_get_sfall_global_int"         => [ 1, 0x819e, true ],
      "op_get_sfall_global_float"       => [ 1, 0x819f, true ],
      "op_create_array"                 => [ 2, 0x822d, true ],
      "op_set_array"                    => [ 3, 0x822e, false ],
      "op_get_array"                    => [ 2, 0x822f, true ],
      "op_free_array"                   => [ 1, 0x8230, false ],
      "op_set_pickpocket_max"           => [ 1, 0x81a0, false ],
      "op_set_hit_chance_max"           => [ 1, 0x81a1, false ],
      "op_set_skill_max"                => [ 1, 0x81a2, false ],
      "op_set_xp_mod"                   => [ 1, 0x81aa, false ],
      "op_set_perk_level_mod"           => [ 1, 0x81ab, false ],
      "op_set_critter_hit_chance_mod"   => [ 3, 0x81c5, false ],
      "op_set_base_hit_chance_mod"      => [ 2, 0x81c6, false ],
      "op_set_critter_skill_mod"        => [ 2, 0x81c7, false ],
      "op_set_base_skill_mod"           => [ 1, 0x81c8, false ],
      "op_set_critter_pickpocket_mod"   => [ 3, 0x81c9, false ],
      "op_set_base_pickpocket_mod"      => [ 2, 0x81ca, false ],
      "op_eax_available"                => [ 0, 0x81a3, true ],
      "op_set_eax_environment"          => [ 1, 0x81a4, false ],
      "op_inc_npc_level"                => [ 1, 0x81a5, false ],
      "op_get_viewport_x"               => [ 0, 0x81a6, true ],
      "op_get_viewport_y"               => [ 0, 0x81a7, true ],
      "op_set_viewport_x"               => [ 1, 0x81a8, false ],
      "op_set_viewport_y"               => [ 1, 0x81a9, false ],
      "op_get_ini_setting"              => [ 1, 0x81ac, true ],  
      "op_get_ini_string"               => [ 1, 0x81eb, true ],    
      "op_get_game_mode"                => [ 0, 0x81af, true ],
      "op_get_uptime"                   => [ 0, 0x81b3, true ],
      "op_set_car_current_town"         => [ 1, 0x81b6, false ],
      "op_set_fake_perk"                => [ 4, 0x81bb, false ],
      "op_set_fake_trait"               => [ 4, 0x81bc, false ],
      "op_set_selectable_perk"          => [ 4, 0x81bd, false ],
      "op_set_perkbox_title"            => [ 1, 0x81be, false ],
      "op_hide_real_perks"              => [ 0, 0x81bf, false ],
      "op_show_real_perks"              => [ 0, 0x81c0, false ],
      "op_has_fake_perk"                => [ 1, 0x81c1, true ], 
      "op_has_fake_trait"               => [ 1, 0x81c2, true ], 
      "op_perk_add_mode"                => [ 1, 0x81c3, false ],
      "op_clear_selectable_perks"       => [ 0, 0x81c4, false ],
      "op_remove_trait"                 => [ 1, 0x8225, false ],
      "op_set_pyromaniac_mod"           => [ 1, 0x81cb, false ],
      "op_apply_heaveho_fix"            => [ 0, 0x81cc, false ],
      "op_set_swiftlearner_mod"         => [ 1, 0x81cd, false ],   
      "op_set_hp_per_level_mod"         => [ 1, 0x81ce, false ], 
      "op_show_iface_tag"               => [ 1, 0x81dc, false ], 
      "op_hide_iface_tag"               => [ 1, 0x81dd, false ],  
      "op_is_iface_tag_active"          => [ 1, 0x81de, true ],
      "op_get_bodypart_hit_modifier"    => [ 1, 0x81df, true ],
      "op_set_bodypart_hit_modifier"    => [ 2, 0x81e0, false ],
      "op_set_critical_table"           => [ 5, 0x81e1, false ],
      "op_get_critical_table"           => [ 4, 0x81e2, true ],
      "op_reset_critical_table"         => [ 4, 0x81e3, false ],
      "op_get_sfall_arg"                => [ 0, 0x81e4, true ],
      "op_set_sfall_return"             => [ 1, 0x81e5, false ],
      "op_init_hook"                    => [ 0, 0x81ea, true ],
      "op_set_unspent_ap_bonus"         => [ 1, 0x81e6, false ],
      "op_get_unspent_ap_bonus"         => [ 0, 0x81e7, true ],
      "op_set_unspent_ap_perk_bonus"    => [ 1, 0x81e8, false ],
      "op_get_unspent_ap_perk_bonus"    => [ 0, 0x81e9, true ],
      "op_sqrt"                         => [ 1, 0x81ec, true ],
      "op_abs"                          => [ 1, 0x81ed, true ],
      "op_sin"                          => [ 1, 0x81ee, true ],
      "op_cos"                          => [ 1, 0x81ef, true ],
      "op_tan"                          => [ 1, 0x81f0, true ],
      "op_arctan"                       => [ 2, 0x81f1, true ],
      "op_set_palette"                  => [ 1, 0x81f2, false ],
      "op_remove_script"                => [ 1, 0x81f3, false ],
      "op_set_script"                   => [ 2, 0x81f4, false ],
      "op_get_script"                   => [ 1, 0x81f5, true ],
      "op_nb_create_char"               => [ 0, 0x81f6, true ],
      "op_fs_create"                    => [ 2, 0x81f7, true ],
      "op_fs_copy"                      => [ 2, 0x81f8, true ],
      "op_fs_find"                      => [ 1, 0x81f9, true ],
      "op_fs_write_byte"                => [ 2, 0x81fa, false ],
      "op_fs_write_short"               => [ 2, 0x81fb, false ],
      "op_fs_write_int"                 => [ 2, 0x81fc, false ],
      "op_fs_write_float"               => [ 2, 0x81fd, false ],
      "op_fs_write_string"              => [ 2, 0x81fe, false ],
      "op_fs_write_bstring"             => [ 2, 0x8208, false ],
      "op_fs_read_byte"                 => [ 1, 0x8209, true ],
      "op_fs_read_short"                => [ 1, 0x820a, true ],
      "op_fs_read_int"                  => [ 1, 0x820b, true ],
      "op_fs_read_float"                => [ 1, 0x820c, true ],
      "op_fs_delete"                    => [ 1, 0x81ff, false ],
      "op_fs_size"                      => [ 1, 0x8200, true ],
      "op_fs_pos"                       => [ 1, 0x8201, true ],
      "op_fs_seek"                      => [ 2, 0x8202, false ],
      "op_fs_resize"                    => [ 2, 0x8203, false ],
      "op_get_proto_data"               => [ 2, 0x8204, true ],
      "op_set_proto_data"               => [ 3, 0x8205, false ],
      "op_set_self"                     => [ 1, 0x8206, false ],
      "op_register_hook"                => [ 1, 0x8207, false ],
      "op_list_begin"                   => [ 1, 0x820d, true ],
      "op_list_next"                    => [ 1, 0x820e, true ],
      "op_list_end"                     => [ 1, 0x820f, false ],
      "op_sfall_ver_major"              => [ 0, 0x8210, true ],
      "op_sfall_ver_minor"              => [ 0, 0x8211, true ],
      "op_sfall_ver_build"              => [ 0, 0x8212, true ],
      "op_hero_select_win"              => [ 1, 0x8213, false ],
      "op_set_hero_race"                => [ 1, 0x8214, false ],
      "op_set_hero_style"               => [ 1, 0x8215, false ],
      "op_set_critter_burst_disable"    => [ 2, 0x8216, false ],
      "op_get_weapon_ammo_pid"          => [ 1, 0x8217, true ],
      "op_set_weapon_ammo_pid"          => [ 2, 0x8218, false ],
      "op_get_weapon_ammo_count"        => [ 1, 0x8219, true ],
      "op_set_weapon_ammo_count"        => [ 2, 0x821a, false ],
      "op_get_screen_width"             => [ 0, 0x8220, true ],
      "op_get_screen_height"            => [ 0, 0x8221, true ],
      "op_stop_game"                    => [ 0, 0x8222, false ],
      "op_resume_game"                  => [ 0, 0x8223, false ],
      "op_create_message_window"        => [ 1, 0x8224, false ],
      "op_get_light_level"              => [ 0, 0x8226, true ],
      "op_refresh_pc_art"               => [ 0, 0x8227, false ],
      "op_get_attack_type"              => [ 0, 0x8228, true ],
      "op_play_sfall_sound"             => [ 2, 0x822b, true ],
      "op_stop_sfall_sound"             => [ 1, 0x822c, false ],
      "op_list_as_array"                => [ 1, 0x8236, true ],
      "op_string_split"                 => [ 2, 0x8235, true ],
      "op_len_array"                    => [ 1, 0x8231, true ],
      "op_resize_array"                 => [ 2, 0x8232, false ],
      "op_temp_array"                   => [ 2, 0x8233, true ],
      "op_fix_array"                    => [ 1, 0x8234, false ],
      "op_atoi"                         => [ 1, 0x8237, true ],
      "op_atof"                         => [ 1, 0x8238, true ],
      "op_scan_array"                   => [ 2, 0x8239, true ],
      "op_get_tile_fid"                 => [ 1, 0x823a, true ],
      "op_modified_ini"                 => [ 0, 0x823b, true ],
      "op_get_sfall_args"               => [ 0, 0x823c, true ], 
      "op_set_sfall_arg"                => [ 2, 0x823d, false ],
      "op_force_aimed_shots"            => [ 1, 0x823e, false ],
      "op_disable_aimed_shots"          => [ 1, 0x823f, false ],
      "op_mark_movie_played"            => [ 1, 0x8240, false ],
      "op_get_npc_level"                => [ 1, 0x8241, true ],
    }
  end
end
..end compile.rb modeval..ida644cbea7f

class ScriptParser < ::Racc::Parser

module_eval <<'..end compile.y modeval..id3530c7997f', 'compile.y', 740

  def parse_error(str)
    puts "Error on line #{@line_num}: #{str}"
    exit 1
  end

  def parse(lines, version)
#@yydebug = true
    @err_str = nil
    @compiler = ScriptCompiler.new(version)
    @lines = lines
    yyparse self, :scan

    if @err_str
      puts @err_str
      exit 1
    end
  end

  def write(io)
    @compiler.write(io)
  end

  # Returns the next token from @lines array.
  def scan
    @line_num = 0
    in_comment = false

    until @lines.empty? do
      str = @lines.shift
      str.chomp! unless str.nil?

      @line_num += 1

      # ignore preprocessor directives
      str = '' if str[0,1] == "#"

      until str.empty? do
        if in_comment
          if str =~ /\*\//
            str = $'
            in_comment = false
          else
            str = ''
          end
        end


        case str
        when /\A\s+/                   # skip whitespace
          str = $'
        when /\A\/\//                  # skip comments
          str = ''
        when /\A\/\*/                  # skip comments
          in_comment = true
          str = $'
        when /\A"/                     # start of quoted string
          str = $'
          quote = ""
          in_quote = true
          while in_quote and str =~ /([^"\\]*)/
            if $'.empty?
              parse_error "unterminated string."
            end
            quote += $1

            if $'[0,1] == '"'
              in_quote = false
              yield :STRING, quote
              str = $'[1..-1]
            else  # $'[0,1] == '\\'
              if $'.length >= 2
                case $'[1,1]
                when '\\' ; quote += "\\"
                when '"'  ; quote += '"'
                when 'n'  ; quote += "\n"
                when 't'  ; quote += "\t"
                when 'r'  ; quote += "\r"
                when 'b'  ; quote += "\b"
                when 'f'  ; quote += "\f"
                else
                  parse_error "unknown escape sequence `#{$'}'."
                end
                str = $'[2..-1]
              else
                parse_error "unterminated string."
              end
            end
          end

        # a single quoted character is the ascii value of that character
        when /\A'.'/           ; yield :INTEGER, $&[0] ; str = $'

        # multi character operators
        when /\A:=/            ; yield ':=', $&       ; str = $'
        when /\A==/            ; yield '==', $&       ; str = $'
        when /\A!=/            ; yield '!=', $&       ; str = $'
        when /\A>=/            ; yield '>=', $&       ; str = $'
        when /\A<=/            ; yield '<=', $&       ; str = $'
        when /\A=>/            ; yield '>=', $&       ; str = $'
        when /\A=</            ; yield '<=', $&       ; str = $'

        # reserved words
        when /\Awhile\b/       ; yield :WHILE, $&     ; str = $'
        when /\Ado\b/          ; yield :DO, $&        ; str = $'
        when /\Aif\b/          ; yield :IF, $&        ; str = $'
        when /\Athen\b/        ; yield :THEN, $&      ; str = $'
        when /\Aelse\b/        ; yield :ELSE, $&      ; str = $'
        when /\Abegin\b/       ; yield :BEGIN, $&     ; str = $'
        when /\Aend\b/         ; yield :END, $&       ; str = $'
        when /\Aimport\b/      ; yield :IMPORT, $&    ; str = $'
        when /\Aexport\b/      ; yield :EXPORT, $&    ; str = $'
        when /\Avariable\b/    ; yield :VARIABLE, $&  ; str = $'
        when /\Aprocedure\b/   ; yield :PROCEDURE, $& ; str = $'
        when /\Acritical\b/    ; yield :CRITICAL, $&  ; str = $'
        when /\Acall\b/        ; yield :CALL, $&      ; str = $'
        when /\Ain\b/          ; yield :IN, $&        ; str = $'
        when /\Awhen\b/        ; yield :WHEN, $&      ; str = $'
        when /\Anot\b/         ; yield :NOT, $&       ; str = $'
        when /\Abwnot\b/       ; yield :BWNOT, $&     ; str = $'
        when /\Areturn\b/      ; yield :RETURN, $&    ; str = $'

        # internal procedures with specific rules
        when /\Aaddregion\b/   ; yield :ADDREGION, $& ; str = $'

        # special asm keywords
        when /\Aasm\b/               ; yield :ASM, $&           ; str = $'
        when /\Aasm_push_value\b/    ; yield :ASM_VALUE, $&     ; str = $'
        when /\Aasm_push_symbol\b/   ; yield :ASM_SYMBOL, $&    ; str = $'
        when /\Aasm_expr\b/          ; yield :ASM_EXPR, $&      ; str = $'

        # infix operators
        when /\Aand\b/         ; yield :AND, $&       ; str = $'
        when /\Aor\b/          ; yield :OR, $&        ; str = $'
        when /\Abwand\b/       ; yield :BWAND, $&     ; str = $'
        when /\Abwor\b/        ; yield :BWOR, $&      ; str = $'
        when /\Abwxor\b/       ; yield :BWXOR, $&     ; str = $'

        # values
        when /\A0x[\da-fA-f]+/ ; yield :INTEGER, $&.hex  ; str = $'
        when /\A\d+\.\d*/      ; yield :FLOAT, $&.to_f   ; str = $'
        when /\A\d*\.\d+/      ; yield :FLOAT, $&.to_f   ; str = $'
        when /\A\d+/           ; yield :INTEGER, $&.to_i ; str = $'
        when /\A\w[\w\d_]*/    ; yield :IDENTIFIER, $&   ; str = $'
        else

          # default is to tokenise a single character
          if str.length != 0
            c = str[0,1]
            yield c, c
            str = str[1..-1]
          end
        end
      end
    end

    yield false, '$'
  end

  def on_error(err_tok, err_val, _values)
    # record the error
    @err_str = "syntax error on line #{@line_num} near `#{err_val}'."
  end
..end compile.y modeval..id3530c7997f

##### racc 1.4.1 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 0, 64, :_reduce_none,
 2, 64, :_reduce_none,
 2, 64, :_reduce_none,
 2, 64, :_reduce_none,
 2, 64, :_reduce_5,
 2, 64, :_reduce_6,
 2, 64, :_reduce_7,
 2, 64, :_reduce_8,
 5, 65, :_reduce_9,
 3, 65, :_reduce_10,
 3, 65, :_reduce_11,
 4, 65, :_reduce_12,
 2, 65, :_reduce_13,
 3, 65, :_reduce_14,
 2, 65, :_reduce_15,
 2, 65, :_reduce_16,
 3, 65, :_reduce_17,
 2, 65, :_reduce_18,
 1, 65, :_reduce_19,
 3, 66, :_reduce_20,
 3, 66, :_reduce_21,
 3, 66, :_reduce_22,
 2, 66, :_reduce_23,
 2, 66, :_reduce_24,
 2, 66, :_reduce_25,
 2, 66, :_reduce_26,
 1, 66, :_reduce_27,
 6, 67, :_reduce_28,
 5, 67, :_reduce_29,
 0, 75, :_reduce_30,
 4, 71, :_reduce_31,
 2, 71, :_reduce_32,
 0, 74, :_reduce_33,
 2, 74, :_reduce_34,
 3, 74, :_reduce_35,
 1, 74, :_reduce_36,
 1, 76, :_reduce_37,
 3, 76, :_reduce_38,
 2, 76, :_reduce_39,
 0, 72, :_reduce_40,
 3, 72, :_reduce_41,
 5, 72, :_reduce_42,
 6, 72, :_reduce_43,
 4, 72, :_reduce_44,
 3, 72, :_reduce_45,
 2, 72, :_reduce_46,
 2, 69, :_reduce_47,
 1, 69, :_reduce_48,
 0, 73, :_reduce_49,
 2, 73, :_reduce_50,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 6, 77, :_reduce_63,
 5, 77, :_reduce_64,
 4, 77, :_reduce_65,
 3, 77, :_reduce_66,
 2, 77, :_reduce_67,
 1, 77, :_reduce_68,
 1, 90, :_reduce_none,
 3, 90, :_reduce_70,
 3, 91, :_reduce_71,
 2, 91, :_reduce_72,
 2, 91, :_reduce_73,
 5, 78, :_reduce_74,
 5, 78, :_reduce_75,
 5, 78, :_reduce_76,
 5, 78, :_reduce_77,
 4, 78, :_reduce_78,
 3, 78, :_reduce_79,
 2, 78, :_reduce_80,
 1, 78, :_reduce_81,
 4, 78, :_reduce_82,
 3, 78, :_reduce_83,
 2, 78, :_reduce_84,
 1, 78, :_reduce_85,
 4, 78, :_reduce_86,
 3, 78, :_reduce_87,
 2, 78, :_reduce_88,
 1, 78, :_reduce_89,
 4, 78, :_reduce_90,
 3, 78, :_reduce_91,
 2, 78, :_reduce_92,
 1, 78, :_reduce_93,
 4, 79, :_reduce_94,
 3, 79, :_reduce_95,
 2, 79, :_reduce_96,
 4, 80, :_reduce_97,
 3, 80, :_reduce_98,
 2, 80, :_reduce_99,
 1, 80, :_reduce_100,
 5, 81, :_reduce_101,
 8, 81, :_reduce_102,
 4, 81, :_reduce_103,
 3, 81, :_reduce_104,
 5, 82, :_reduce_105,
 8, 82, :_reduce_106,
 4, 82, :_reduce_107,
 3, 82, :_reduce_108,
 6, 83, :_reduce_109,
 4, 83, :_reduce_110,
 3, 83, :_reduce_111,
 2, 83, :_reduce_112,
 1, 83, :_reduce_113,
 8, 84, :_reduce_114,
 3, 85, :_reduce_115,
 2, 85, :_reduce_116,
 3, 86, :_reduce_117,
 2, 86, :_reduce_118,
 5, 87, :_reduce_119,
 3, 87, :_reduce_120,
 2, 87, :_reduce_121,
 1, 87, :_reduce_122,
 6, 88, :_reduce_123,
 4, 88, :_reduce_124,
 3, 88, :_reduce_125,
 2, 88, :_reduce_126,
 1, 88, :_reduce_127,
 1, 94, :_reduce_128,
 3, 94, :_reduce_129,
 2, 92, :_reduce_130,
 3, 92, :_reduce_131,
 2, 92, :_reduce_132,
 1, 93, :_reduce_133,
 3, 93, :_reduce_134,
 2, 93, :_reduce_135,
 1, 89, :_reduce_136,
 1, 89, :_reduce_137,
 1, 89, :_reduce_138,
 1, 89, :_reduce_139,
 1, 89, :_reduce_140,
 1, 89, :_reduce_141,
 2, 89, :_reduce_142,
 2, 89, :_reduce_143,
 2, 89, :_reduce_144,
 3, 89, :_reduce_145,
 3, 89, :_reduce_146,
 3, 98, :_reduce_147,
 3, 98, :_reduce_148,
 3, 98, :_reduce_149,
 3, 98, :_reduce_150,
 3, 98, :_reduce_151,
 3, 98, :_reduce_152,
 3, 98, :_reduce_153,
 3, 98, :_reduce_154,
 3, 98, :_reduce_155,
 3, 98, :_reduce_156,
 3, 98, :_reduce_157,
 3, 98, :_reduce_158,
 3, 98, :_reduce_159,
 3, 98, :_reduce_160,
 3, 98, :_reduce_161,
 3, 98, :_reduce_162,
 3, 98, :_reduce_163,
 1, 99, :_reduce_none,
 1, 99, :_reduce_none,
 1, 99, :_reduce_none,
 1, 99, :_reduce_none,
 1, 99, :_reduce_none,
 1, 99, :_reduce_none,
 1, 99, :_reduce_none,
 1, 99, :_reduce_none,
 1, 99, :_reduce_none,
 1, 99, :_reduce_none,
 1, 99, :_reduce_none,
 1, 99, :_reduce_none,
 1, 99, :_reduce_none,
 1, 99, :_reduce_none,
 1, 99, :_reduce_none,
 1, 99, :_reduce_none,
 2, 96, :_reduce_180,
 5, 95, :_reduce_181,
 4, 95, :_reduce_182,
 4, 95, :_reduce_183,
 2, 95, :_reduce_184,
 2, 95, :_reduce_185,
 2, 97, :_reduce_186,
 1, 97, :_reduce_187,
 1, 70, :_reduce_none,
 1, 70, :_reduce_none,
 1, 70, :_reduce_190 ]

racc_reduce_n = 191

racc_shift_n = 228

racc_action_table = [
   125,    75,    47,    48,    79,    65,    18,    44,    56,   210,
   125,   113,    47,    48,   121,    47,    48,    30,    56,    83,
    84,    56,   179,   172,    18,    30,   196,   205,   206,    82,
    57,   123,    18,   190,    41,    64,    73,    50,    51,    52,
    57,    43,   122,    57,   120,   112,   212,    50,    51,    52,
    50,    51,    52,    47,    48,    45,   126,    47,    48,    56,
    39,    53,    80,    56,    39,    45,   126,   189,    45,   128,
    39,    53,   130,    39,    53,    50,    51,    52,    96,    98,
   100,    57,    50,    51,    52,    57,   214,   215,    50,    51,
    52,   176,    50,    51,    52,    47,    48,   118,    47,    48,
   185,    56,   186,   117,    56,   175,    45,   114,    47,    48,
    45,    39,    53,   174,    56,    39,    53,    96,    98,   100,
   103,   105,   106,    57,   171,   172,    57,    96,    98,   100,
    50,    51,    52,    50,    51,    52,    57,    50,    51,    52,
    47,    48,   137,    50,    51,    52,    56,   187,    45,   188,
    73,    45,   109,    39,    53,   193,    39,    53,    18,    47,
    48,    45,    50,    51,    52,    56,    39,    53,    57,   195,
   139,   169,    47,    48,   200,    50,    51,    52,    56,    96,
    98,   100,   103,   105,    81,    47,    48,    57,    73,   168,
    76,    56,    71,    45,    50,    51,    52,    70,    39,    53,
    57,   182,    30,    68,    47,    48,   166,    50,    51,    52,
    56,    18,    45,    57,    63,   142,   219,    39,    53,    60,
    50,    51,    52,    47,    48,    45,   220,   221,    18,    56,
    39,    53,    57,    42,    38,    37,    47,    48,    45,    50,
    51,    52,    56,    39,    53,    36,   227,   nil,   nil,    47,
    48,    57,   nil,   nil,   nil,    56,   nil,    45,    50,    51,
    52,   nil,    39,    53,    57,   nil,   nil,   nil,    47,    48,
   nil,    50,    51,    52,    56,   nil,    45,    57,   nil,   nil,
   nil,    39,    53,   nil,    50,    51,    52,    47,    48,    45,
   nil,   nil,   nil,    56,    39,    53,    57,   nil,   nil,   nil,
    47,    48,    45,    50,    51,    52,    56,    39,    53,   nil,
   nil,   nil,   nil,    47,    48,    57,   nil,   nil,   nil,    56,
   nil,    45,    50,    51,    52,   nil,    39,    53,    57,   nil,
   nil,   nil,    47,    48,   nil,    50,    51,    52,    56,   nil,
    45,    57,   nil,   nil,   nil,    39,    53,   nil,    50,    51,
    52,   nil,   nil,    45,   nil,   nil,   nil,   nil,    39,    53,
    57,   nil,   nil,   nil,   nil,   nil,    45,    50,    51,    52,
   nil,    39,    53,    96,    98,   100,   103,   105,   106,    90,
    47,    48,   nil,    47,    48,    45,    56,   nil,   177,    56,
    39,    53,    96,    98,   100,   103,   105,   106,    90,    91,
    92,    93,    94,    97,    99,   101,   102,   104,    57,   nil,
   nil,    57,   nil,   nil,   nil,    50,    51,    52,    50,    51,
    52,    47,    48,   nil,    47,    48,   nil,    56,   nil,   nil,
    56,   nil,   nil,    45,    47,    48,    45,   nil,    39,    53,
    56,    39,    53,   nil,   nil,   nil,   nil,   178,   nil,    57,
   nil,   nil,    57,   nil,   nil,   nil,    50,    51,    52,    50,
    51,    52,    57,   nil,   nil,   nil,    47,    48,   nil,    50,
    51,    52,    56,   nil,    45,   nil,   nil,    45,   nil,    39,
    53,   nil,    39,    53,   nil,    47,    48,    45,   nil,   nil,
   nil,    56,    39,    53,    57,   nil,   nil,   nil,    47,    48,
   nil,    50,    51,    52,    56,   nil,   nil,   nil,   nil,   nil,
   nil,    47,    48,    57,   nil,   nil,   nil,    56,   nil,    45,
    50,    51,    52,   nil,    39,    53,    57,   nil,   nil,   nil,
    47,    48,   nil,    50,    51,    52,    56,   nil,    45,    57,
   nil,   nil,   nil,    39,    53,   nil,    50,    51,    52,    47,
    48,    45,   nil,   nil,   nil,    56,    39,    53,    57,   nil,
   nil,   nil,    47,    48,    45,    50,    51,    52,    56,    39,
    53,   nil,   nil,   nil,   nil,    47,    48,    57,   nil,   nil,
   nil,    56,   nil,    45,    50,    51,    52,   nil,    39,    53,
    57,   nil,   nil,   nil,    47,    48,   nil,    50,    51,    52,
    56,   nil,    45,    57,   nil,   nil,   nil,    39,    53,   nil,
    50,    51,    52,    47,    48,    45,   nil,   nil,   nil,    56,
    39,    53,    57,   nil,   nil,   nil,    47,    48,    45,    50,
    51,    52,    56,    39,    53,   nil,   nil,   nil,   nil,   nil,
   nil,    57,   nil,   nil,   nil,   nil,   nil,    45,    50,    51,
    52,   nil,    39,    53,    57,   nil,   nil,   nil,   nil,   nil,
   nil,    50,    51,    52,   nil,   nil,    45,   nil,   nil,   nil,
   nil,    39,    53,   nil,   nil,   nil,   nil,   nil,   nil,    45,
   nil,   nil,   183,   nil,    39,    53,    96,    98,   100,   103,
   105,   106,    90,    91,    92,    93,    94,    97,    99,   101,
   102,   104,   140,   nil,   nil,   nil,    96,    98,   100,   103,
   105,   106,    90,    91,    92,    93,    94,    97,    99,   101,
   102,   104,    96,    98,   100,   103,   105,   106,    90,    91,
    92,    93,    94,    97,    99,   101,   102,   104,   nil,   184,
    96,    98,   100,   103,   105,   106,    90,    91,    92,    93,
    94,    97,    99,   101,   102,   104,   nil,   nil,   141,    96,
    98,   100,   103,   105,   106,    90,    91,    92,    93,    94,
    97,    99,   101,   102,   104,   nil,    95,    96,    98,   100,
   103,   105,   106,    90,    91,    92,    93,    94,    97,  -191,
  -191,   nil,   163,    96,    98,   100,   103,   105,   106,    90,
    91,    92,    93,    94,    97,    99,   101,   102,   104,     7,
   nil,   132,    96,    98,   100,   103,   105,   106,    90,    91,
    92,    93,    94,    97,    99,   101,   102,   104,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    19,    23,    26,   nil,    30,
    31,    33,     2,   nil,    11,   131,    18,   nil,   nil,   nil,
   nil,   nil,   nil,     3,     8,   nil,   nil,    16,    20,    24,
    27,   nil,   nil,   nil,   138,    96,    98,   100,   103,   105,
   106,    90,    91,    92,    93,    94,    97,    99,   101,   102,
   104,    96,    98,   100,   103,   105,   106,    90,    91,    92,
    93,    94,    97,    99,   101,   102,   104,    96,    98,   100,
   103,   105,   106,    90,    91,    92,    93,    94,    97,    99,
   101,   102,   104,   202,   nil,   180,   nil,   nil,   nil,    31,
    33,     2,   nil,    11,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   181,     3,     8,   nil,   nil,    16,    20,    24,    27,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   225,    96,    98,
   100,   103,   105,   106,    90,    91,    92,    93,    94,    97,
    99,   101,   102,   104,    96,    98,   100,   103,   105,   106,
    90,    91,    92,    93,    94,    97,    99,   101,   102,   104,
   202,   nil,   nil,   nil,   nil,   nil,    31,    33,     2,   nil,
    11,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   224,     3,
     8,   202,   nil,    16,    20,    24,    27,    31,    33,     2,
   nil,    11,   nil,   213,   173,    31,    33,     2,   nil,    11,
     3,     8,   nil,   nil,    16,    20,    24,    27,     3,     8,
   nil,   nil,    16,    20,    24,    27,   192,   nil,    31,    33,
     2,   nil,    11,   nil,   223,   nil,    31,    33,     2,   nil,
    11,     3,     8,   nil,   nil,    16,    20,    24,    27,     3,
     8,   nil,   nil,    16,    20,    24,    27,    96,    98,   100,
   103,   105,   106,    90,    91,    92,    93,    94,    97,    99,
   101,   102,   104,    96,    98,   100,   103,   105,   106,    90,
    91,    92,    93,    94,    97,    99,   101,   102,   104,    96,
    98,   100,   103,   105,   106,    90,    91,    92,    93,    94,
    97,    99,   101,   102,   104,    96,    98,   100,   103,   105,
   106,    90,    91,    92,    93,    94,    97,  -191,  -191,    96,
    98,   100,   103,   105,   106,    90,    91,    92,    93,    94,
    97,    99,   101,    96,    98,   100,   103,   105,   106,    90,
    91,    92,    93,    94,    97,    99,   101,    96,    98,   100,
   103,   105,   106,    90,    91,  -191,  -191,  -191,  -191,    96,
    98,   100,   103,   105,   106,    90,    91,  -191,  -191,  -191,
  -191,    96,    98,   100,   103,   105,   106,    90,    91,  -191,
  -191,  -191,  -191,    96,    98,   100,   103,   105,   106,    90,
    91,  -191,  -191,  -191,  -191 ]

racc_action_check = [
    73,    31,    73,    73,    39,    22,   169,    15,    73,   186,
    82,    61,    82,    82,    69,    92,    92,    23,    82,    41,
    41,    92,   134,   134,    23,    19,   169,   179,   179,    41,
    73,    72,    19,   164,     8,    22,    31,    73,    73,    73,
    82,    15,    70,    92,    69,    61,   190,    82,    82,    82,
    92,    92,    92,   102,   102,    73,    73,   101,   101,   102,
    73,    73,    39,   101,     8,    82,    82,   164,    92,    74,
    82,    82,    76,    92,    92,   190,   190,   190,   158,   158,
   158,   102,    68,    68,    68,   101,   198,   198,   102,   102,
   102,   132,   101,   101,   101,   100,   100,    67,    99,    99,
   149,   100,   149,    66,    99,   131,   102,    62,    16,    16,
   101,   102,   102,   130,    16,   101,   101,   143,   143,   143,
   143,   143,   143,   100,   127,   127,    99,   160,   160,   160,
   100,   100,   100,    99,    99,    99,    16,    44,    44,    44,
    98,    98,    85,    16,    16,    16,    98,   162,   100,   163,
    57,    99,    53,   100,   100,   166,    99,    99,   167,   206,
   206,    16,   113,   113,   113,   206,    16,    16,    98,   168,
    87,   123,   205,   205,   174,    98,    98,    98,   205,   161,
   161,   161,   161,   161,    40,    97,    97,   206,   178,   122,
    33,    97,    30,    98,   206,   206,   206,    27,    98,    98,
   205,   138,    26,    24,    96,    96,   119,   205,   205,   205,
    96,   116,   206,    97,    20,    89,   207,   206,   206,    18,
    97,    97,    97,    95,    95,   205,   211,   212,   215,    95,
   205,   205,    96,    11,     7,     3,    94,    94,    97,    96,
    96,    96,    94,    97,    97,     2,   221,   nil,   nil,   185,
   185,    95,   nil,   nil,   nil,   185,   nil,    96,    95,    95,
    95,   nil,    96,    96,    94,   nil,   nil,   nil,   184,   184,
   nil,    94,    94,    94,   184,   nil,    95,   185,   nil,   nil,
   nil,    95,    95,   nil,   185,   185,   185,    93,    93,    94,
   nil,   nil,   nil,    93,    94,    94,   184,   nil,   nil,   nil,
   103,   103,   185,   184,   184,   184,   103,   185,   185,   nil,
   nil,   nil,   nil,    36,    36,    93,   nil,   nil,   nil,    36,
   nil,   184,    93,    93,    93,   nil,   184,   184,   103,   nil,
   nil,   nil,    37,    37,   nil,   103,   103,   103,    37,   nil,
    93,    36,   nil,   nil,   nil,    93,    93,   nil,    36,    36,
    36,   nil,   nil,   103,   nil,   nil,   nil,   nil,   103,   103,
    37,   nil,   nil,   nil,   nil,   nil,    36,    37,    37,    37,
   nil,    36,    36,   144,   144,   144,   144,   144,   144,   144,
    91,    91,   nil,    84,    84,    37,    91,   nil,   133,    84,
    37,    37,   133,   133,   133,   133,   133,   133,   133,   133,
   133,   133,   133,   133,   133,   133,   133,   133,    91,   nil,
   nil,    84,   nil,   nil,   nil,    91,    91,    91,    84,    84,
    84,    42,    42,   nil,    90,    90,   nil,    42,   nil,   nil,
    90,   nil,   nil,    91,    45,    45,    84,   nil,    91,    91,
    45,    84,    84,   nil,   nil,   nil,   nil,   133,   nil,    42,
   nil,   nil,    90,   nil,   nil,   nil,    42,    42,    42,    90,
    90,    90,    45,   nil,   nil,   nil,    75,    75,   nil,    45,
    45,    45,    75,   nil,    42,   nil,   nil,    90,   nil,    42,
    42,   nil,    90,    90,   nil,    47,    47,    45,   nil,   nil,
   nil,    47,    45,    45,    75,   nil,   nil,   nil,    48,    48,
   nil,    75,    75,    75,    48,   nil,   nil,   nil,   nil,   nil,
   nil,   105,   105,    47,   nil,   nil,   nil,   105,   nil,    75,
    47,    47,    47,   nil,    75,    75,    48,   nil,   nil,   nil,
    56,    56,   nil,    48,    48,    48,    56,   nil,    47,   105,
   nil,   nil,   nil,    47,    47,   nil,   105,   105,   105,    80,
    80,    48,   nil,   nil,   nil,    80,    48,    48,    56,   nil,
   nil,   nil,   104,   104,   105,    56,    56,    56,   104,   105,
   105,   nil,   nil,   nil,   nil,   106,   106,    80,   nil,   nil,
   nil,   106,   nil,    56,    80,    80,    80,   nil,    56,    56,
   104,   nil,   nil,   nil,    63,    63,   nil,   104,   104,   104,
    63,   nil,    80,   106,   nil,   nil,   nil,    80,    80,   nil,
   106,   106,   106,    83,    83,   104,   nil,   nil,   nil,    83,
   104,   104,    63,   nil,   nil,   nil,   172,   172,   106,    63,
    63,    63,   172,   106,   106,   nil,   nil,   nil,   nil,   nil,
   nil,    83,   nil,   nil,   nil,   nil,   nil,    63,    83,    83,
    83,   nil,    63,    63,   172,   nil,   nil,   nil,   nil,   nil,
   nil,   172,   172,   172,   nil,   nil,    83,   nil,   nil,   nil,
   nil,    83,    83,   nil,   nil,   nil,   nil,   nil,   nil,   172,
   nil,   nil,   148,   nil,   172,   172,   148,   148,   148,   148,
   148,   148,   148,   148,   148,   148,   148,   148,   148,   148,
   148,   148,    88,   nil,   nil,   nil,    88,    88,    88,    88,
    88,    88,    88,    88,    88,    88,    88,    88,    88,    88,
    88,    88,    46,    46,    46,    46,    46,    46,    46,    46,
    46,    46,    46,    46,    46,    46,    46,    46,   nil,   148,
   115,   115,   115,   115,   115,   115,   115,   115,   115,   115,
   115,   115,   115,   115,   115,   115,   nil,   nil,    88,    78,
    78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
    78,    78,    78,    78,    78,   nil,    46,   154,   154,   154,
   154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
   154,   nil,   115,    77,    77,    77,    77,    77,    77,    77,
    77,    77,    77,    77,    77,    77,    77,    77,    77,     1,
   nil,    78,    86,    86,    86,    86,    86,    86,    86,    86,
    86,    86,    86,    86,    86,    86,    86,    86,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     1,     1,     1,   nil,     1,
     1,     1,     1,   nil,     1,    77,     1,   nil,   nil,   nil,
   nil,   nil,   nil,     1,     1,   nil,   nil,     1,     1,     1,
     1,   nil,   nil,   nil,    86,   135,   135,   135,   135,   135,
   135,   135,   135,   135,   135,   135,   135,   135,   135,   135,
   135,   136,   136,   136,   136,   136,   136,   136,   136,   136,
   136,   136,   136,   136,   136,   136,   136,   218,   218,   218,
   218,   218,   218,   218,   218,   218,   218,   218,   218,   218,
   218,   218,   218,   219,   nil,   135,   nil,   nil,   nil,   219,
   219,   219,   nil,   219,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   136,   219,   219,   nil,   nil,   219,   219,   219,   219,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   218,   217,   217,
   217,   217,   217,   217,   217,   217,   217,   217,   217,   217,
   217,   217,   217,   217,   129,   129,   129,   129,   129,   129,
   129,   129,   129,   129,   129,   129,   129,   129,   129,   129,
   182,   nil,   nil,   nil,   nil,   nil,   182,   182,   182,   nil,
   182,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   217,   182,
   182,   175,   nil,   182,   182,   182,   182,   175,   175,   175,
   nil,   175,   nil,   194,   129,   194,   194,   194,   nil,   194,
   175,   175,   nil,   nil,   175,   175,   175,   175,   194,   194,
   nil,   nil,   194,   194,   194,   194,   165,   nil,   165,   165,
   165,   nil,   165,   nil,   216,   nil,   216,   216,   216,   nil,
   216,   165,   165,   nil,   nil,   165,   165,   165,   165,   216,
   216,   nil,   nil,   216,   216,   216,   216,   208,   208,   208,
   208,   208,   208,   208,   208,   208,   208,   208,   208,   208,
   208,   208,   208,   124,   124,   124,   124,   124,   124,   124,
   124,   124,   124,   124,   124,   124,   124,   124,   124,   199,
   199,   199,   199,   199,   199,   199,   199,   199,   199,   199,
   199,   199,   199,   199,   199,   156,   156,   156,   156,   156,
   156,   156,   156,   156,   156,   156,   156,   156,   156,   157,
   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
   157,   157,   157,   159,   159,   159,   159,   159,   159,   159,
   159,   159,   159,   159,   159,   159,   159,   145,   145,   145,
   145,   145,   145,   145,   145,   145,   145,   145,   145,   147,
   147,   147,   147,   147,   147,   147,   147,   147,   147,   147,
   147,   146,   146,   146,   146,   146,   146,   146,   146,   146,
   146,   146,   146,   152,   152,   152,   152,   152,   152,   152,
   152,   152,   152,   152,   152 ]

racc_action_pointer = [
   nil,   809,   189,   179,   nil,   nil,   nil,   234,     3,   nil,
   nil,   177,   nil,   nil,   nil,   -14,   105,   nil,   188,    -5,
   158,   nil,   -20,   -13,   147,   nil,   172,   141,   nil,   nil,
   191,   -20,   nil,   134,   nil,   nil,   310,   329,   nil,     3,
   129,   -27,   418,   nil,    99,   431,   717,   482,   495,   nil,
   nil,   nil,   nil,   121,   nil,   nil,   527,    94,   nil,   nil,
   nil,   -10,    52,   591,   nil,   nil,    48,    42,    44,   -11,
     4,   nil,     0,    -1,    14,   463,    34,   788,   754,   nil,
   546,   nil,     9,   610,   380,    87,   807,   115,   701,   214,
   421,   377,    12,   284,   233,   220,   201,   182,   137,    95,
    92,    54,    50,   297,   559,   508,   572,   nil,   nil,   nil,
   nil,   nil,   nil,   124,   nil,   735,   174,   nil,   nil,   149,
   nil,   nil,   132,   115,  1078,   nil,   nil,    67,   nil,   959,
    56,    71,    36,   387,   -35,   860,   876,   nil,   165,   nil,
   nil,   nil,   nil,   112,   368,  1152,  1176,  1164,   681,    42,
   nil,   nil,  1188,   nil,   772,   nil,  1110,  1124,    73,  1138,
   122,   174,    92,    94,    12,  1007,   100,   121,   114,   -31,
   nil,   nil,   623,   nil,   119,   976,   nil,   nil,   132,   -19,
   nil,   nil,   955,   nil,   265,   246,   -46,   nil,   nil,   nil,
    37,   nil,   nil,   nil,   984,   nil,   nil,   nil,    29,  1094,
   nil,   nil,   nil,   nil,   nil,   169,   156,   193,  1062,   nil,
   nil,   171,   189,   nil,   nil,   191,  1015,   943,   892,   888,
   nil,   191,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -1,  -191,  -127,  -122,   -62,   -51,    -3,  -191,  -100,   -52,
    -4,  -113,   -53,    -8,   -54,   -19,   -68,   -55,   -48,    -6,
   -93,   -56,   -27,    -5,   -85,   -57,    -7,   -89,   -58,   -59,
   -30,  -191,   -60,   -81,   -61,    -2,  -126,  -121,   228,  -191,
  -116,   -99,  -112,   -13,   -18,  -191,   -67,  -191,  -191,  -140,
  -188,  -189,  -190,  -187,  -139,  -136,  -191,  -141,  -137,  -138,
   -47,   -15,   -25,   -92,   -23,   -40,   -16,   -24,   -84,   -26,
   -88,   -32,  -191,  -191,  -118,   -96,   -80,  -125,  -120,  -185,
  -184,  -115,  -191,  -104,  -108,   -98,  -111,   -17,  -191,  -191,
  -179,  -178,  -169,  -168,  -167,   -66,  -172,  -166,  -173,  -164,
  -174,  -165,  -175,  -170,  -176,  -171,  -177,  -143,  -142,  -186,
  -144,  -180,   -10,   -14,   -21,   -91,   -49,   -11,   -20,   -83,
   -22,   -40,   -87,   -33,  -133,  -132,  -130,  -191,  -117,   -95,
   -79,  -124,  -191,  -191,  -191,  -103,  -107,   -97,  -110,   -12,
  -146,  -145,  -163,  -162,  -161,  -152,  -151,  -150,  -191,   -65,
   -69,  -155,  -149,  -156,  -147,  -157,  -148,  -158,  -153,  -159,
  -154,  -160,  -191,   -90,   -46,  -191,   -82,   -49,   -86,   -36,
   -31,  -131,  -135,   -94,   -78,  -191,  -119,  -183,  -182,  -131,
  -101,  -105,  -191,   -73,   -72,  -191,   -64,    -9,   -77,   -41,
   -45,   -50,   -29,   -75,  -191,   -76,   -34,   -37,  -191,  -134,
   -74,  -128,   -49,  -123,  -181,  -191,  -191,  -109,   -71,   -70,
   -63,   -44,  -191,   -28,   -35,   -39,  -191,  -191,  -191,  -191,
   -42,  -191,   -38,  -129,  -102,  -106,  -114,   -43 ]

racc_goto_table = [
    13,    15,    74,   116,    46,    87,   150,   170,   203,   165,
   198,   127,    85,    72,   149,   207,    22,     1,    10,    61,
   134,     6,    35,    66,    77,    78,    40,   nil,   111,   119,
    86,   nil,   nil,    88,    62,   107,   108,   nil,    67,   nil,
   nil,    69,   nil,   nil,   110,   nil,   nil,   nil,   nil,   nil,
   nil,   115,   226,   nil,   nil,   nil,   nil,   nil,   nil,   167,
   194,   nil,   nil,   129,   nil,   nil,   nil,   nil,   133,   nil,
   nil,   135,   136,   nil,   162,   nil,   nil,   nil,   143,   144,
   145,   146,   147,   148,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   216,   209,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   204,
   nil,   211,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   199,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   197,
   nil,   nil,   208,   148,   201,   nil,   nil,   nil,   nil,   nil,
   nil,   201,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   217,   218,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   222,   nil,   nil,   201 ]

racc_goto_check = [
     5,     6,    29,     9,    26,     7,    28,    11,    31,    10,
    13,    30,    29,    12,    27,    31,     8,     1,     4,     6,
    30,     3,     2,     6,    26,    26,    32,   nil,    29,     7,
    26,   nil,   nil,    26,     8,    26,    26,   nil,     8,   nil,
   nil,     8,   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,
   nil,    26,    31,   nil,   nil,   nil,   nil,   nil,   nil,     9,
    10,   nil,   nil,    26,   nil,   nil,   nil,   nil,    26,   nil,
   nil,    26,    26,   nil,     7,   nil,   nil,   nil,    26,    26,
    26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
    26,    26,    26,    26,    26,    10,    28,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    29,
   nil,     7,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,
   nil,   nil,    26,    26,     5,   nil,   nil,   nil,   nil,   nil,
   nil,     5,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    26,    26,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,     5 ]

racc_goto_pointer = [
   nil,    17,    21,    20,    17,    -1,     0,   -39,    15,   -62,
  -107,  -116,   -17,  -159,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   -12,   -81,   -89,   -29,
   -62,  -167,    18,   nil,   nil,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   191,   164,    49,   nil,   nil,
   nil,   nil,   nil,   nil,     5,     9,    12,    14,    17,    21,
    25,    28,    29,    32,    34,     4,   124,   nil,   nil,   nil,
   nil,   nil,    54,    55,    58,    59,    89 ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :UMINUS => 2,
 :BWNOT => 3,
 :NOT => 4,
 "*" => 5,
 "/" => 6,
 "%" => 7,
 "+" => 8,
 "-" => 9,
 :BWAND => 10,
 :BWXOR => 11,
 :BWOR => 12,
 ">" => 13,
 "<" => 14,
 ">=" => 15,
 "<=" => 16,
 "==" => 17,
 "!=" => 18,
 :AND => 19,
 :OR => 20,
 ":=" => 21,
 :ELSE_RULE => 22,
 :ELSE => 23,
 :IFX => 24,
 :BEGIN => 25,
 :EXPORT => 26,
 :IMPORT => 27,
 :CRITICAL => 28,
 :END => 29,
 :PROCEDURE => 30,
 :IDENTIFIER => 31,
 :ASM => 32,
 :WHILE => 33,
 :DO => 34,
 :IF => 35,
 :THEN => 36,
 :VARIABLE => 37,
 :INTEGER => 38,
 :FLOAT => 39,
 :STRING => 40,
 :OP_NO_R => 41,
 :OP_RET => 42,
 :OP_EXPR => 43,
 :RETURN => 44,
 :CALL => 45,
 :IN => 46,
 :WHEN => 47,
 :ADDREGION => 48,
 :ASM_EXPR => 49,
 :ASM_VALUE => 50,
 :ASM_SYMBOL => 51,
 :RULE => 52,
 :ERROR => 53,
 :ERROR2 => 54,
 ";" => 55,
 "(" => 56,
 ")" => 57,
 "," => 58,
 "{" => 59,
 "}" => 60,
 "$" => 61,
 "@" => 62 }

racc_use_result_var = true

racc_nt_base = 63

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'UMINUS',
'BWNOT',
'NOT',
'"*"',
'"/"',
'"%"',
'"+"',
'"-"',
'BWAND',
'BWXOR',
'BWOR',
'">"',
'"<"',
'">="',
'"<="',
'"=="',
'"!="',
'AND',
'OR',
'":="',
'ELSE_RULE',
'ELSE',
'IFX',
'BEGIN',
'EXPORT',
'IMPORT',
'CRITICAL',
'END',
'PROCEDURE',
'IDENTIFIER',
'ASM',
'WHILE',
'DO',
'IF',
'THEN',
'VARIABLE',
'INTEGER',
'FLOAT',
'STRING',
'OP_NO_R',
'OP_RET',
'OP_EXPR',
'RETURN',
'CALL',
'IN',
'WHEN',
'ADDREGION',
'ASM_EXPR',
'ASM_VALUE',
'ASM_SYMBOL',
'RULE',
'ERROR',
'ERROR2',
'";"',
'"("',
'")"',
'","',
'"{"',
'"}"',
'"$"',
'"@"',
'$start',
'script',
'var_decl',
'proc_decl',
'proc_defn',
'stmt',
'var_def',
'value',
'proc_header',
'lvar_decl',
'stmts',
'proc_params',
'@1',
'params',
'addregion_stmt',
'asm_stmt',
'assign_stmt',
'call_stmt',
'callin_stmt',
'callwhen_stmt',
'if_stmt',
'if_else_stmt',
'indirect_call_stmt',
'op_stmt',
'return_stmt',
'while_stmt',
'expr',
'points',
'point',
'paren_args',
'args',
'block_stmts',
'indirect_call',
'proc_call',
'proc_num',
'infix_expr',
'infix_ops']

Racc_debug_parser = true

##### racc system variables end #####

 # reduce 0 omitted

 # reduce 1 omitted

 # reduce 2 omitted

 # reduce 3 omitted

 # reduce 4 omitted

module_eval <<'.,.,', 'compile.y', 79
  def _reduce_5( val, _values, result )
                 parse_error "`procedure' or `variable' expected " +
                             "after `import'."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 84
  def _reduce_6( val, _values, result )
                 parse_error "`procedure' or `variable' expected " +
                             "after `export'."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 89
  def _reduce_7( val, _values, result )
                 parse_error "`procedure' expected after `critical'."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 93
  def _reduce_8( val, _values, result )
                 parse_error "variable or procedure definition expected."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 100
  def _reduce_9( val, _values, result )
                 @compiler.add_exported_variable(@line_num, val[1], val[3])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 104
  def _reduce_10( val, _values, result )
                 @compiler.add_exported_variable(@line_num, val[1], 0)
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 108
  def _reduce_11( val, _values, result )
                 @compiler.add_imported_variable(@line_num, val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 112
  def _reduce_12( val, _values, result )
                 @compiler.add_script_variable(@line_num, val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 116
  def _reduce_13( val, _values, result )
                 @compiler.add_script_variable(@line_num, val[0], 0)
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 121
  def _reduce_14( val, _values, result )
                 parse_error "value expected after `:='."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 125
  def _reduce_15( val, _values, result )
                 parse_error "`:=' or `;' expected after identifier."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 129
  def _reduce_16( val, _values, result )
                 parse_error "`;' expected."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 133
  def _reduce_17( val, _values, result )
                 parse_error "`;' expected."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 137
  def _reduce_18( val, _values, result )
                 parse_error "value expected after `:='."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 141
  def _reduce_19( val, _values, result )
                 parse_error "`:=' or `;' expected after identifier."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 147
  def _reduce_20( val, _values, result )
 name, args = val[1]
                 @compiler.add_procedure(@procedure_line_num, name,
                                         args.length, :IMPORT)
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 152
  def _reduce_21( val, _values, result )
 name, args = val[1]
                 @compiler.add_procedure(@procedure_line_num, name,
                                         args.length, :EXPORT)
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 157
  def _reduce_22( val, _values, result )
 name, args = val[1]
                 @compiler.add_procedure(@procedure_line_num, name,
                                         args.length, :CRITICAL)
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 162
  def _reduce_23( val, _values, result )
 name, args = val[0]
                 @compiler.add_procedure(@procedure_line_num, name,
                                         args.length)
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 169
  def _reduce_24( val, _values, result )
                 parse_error "`;' expected."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 173
  def _reduce_25( val, _values, result )
                 parse_error "`;' expected."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 177
  def _reduce_26( val, _values, result )
                 parse_error "`;' or `begin' expected."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 181
  def _reduce_27( val, _values, result )
                 parse_error "`;' or `begin' expected."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 187
  def _reduce_28( val, _values, result )
 name, args = val[1]
                 @compiler.add_procedure_defn(@procedure_line_num, name,
                                               args, val[3], val[4],
                                              :CRITICAL)
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 193
  def _reduce_29( val, _values, result )
 name, args = val[0]
                 @compiler.add_procedure_defn(@procedure_line_num, name,
                                              args, val[2], val[3])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 201
  def _reduce_30( val, _values, result )
 @procedure_line_num = @line_num
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 202
  def _reduce_31( val, _values, result )
 result = val.slice(2, 2)
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 206
  def _reduce_32( val, _values, result )
                  parse_error "identifier expected after `procedure'."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 211
  def _reduce_33( val, _values, result )
 result = []
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 212
  def _reduce_34( val, _values, result )
 result = []
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 213
  def _reduce_35( val, _values, result )
 result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 217
  def _reduce_36( val, _values, result )
                   parse_error "`variable' expected."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 222
  def _reduce_37( val, _values, result )
 result = [ val[0] ]
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 223
  def _reduce_38( val, _values, result )
 result = val[0].push(val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 227
  def _reduce_39( val, _values, result )
                   parse_error "`variable' expected after comma."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 233
  def _reduce_40( val, _values, result )
 result = []
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 236
  def _reduce_41( val, _values, result )
                 result = val[0].push([ val[1], 0 ])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 240
  def _reduce_42( val, _values, result )
                 result = val[0].push([ val[1], val[3] ])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 245
  def _reduce_43( val, _values, result )
                 parse_error "can not initialise with a negative number."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 249
  def _reduce_44( val, _values, result )
                 parse_error "`;' expected."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 253
  def _reduce_45( val, _values, result )
                 parse_error "value expected after `:='."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 257
  def _reduce_46( val, _values, result )
                 parse_error "`;' or `:=' expected after identifier."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 262
  def _reduce_47( val, _values, result )
 result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 266
  def _reduce_48( val, _values, result )
                 parse_error "identifier expected after `variable'."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 273
  def _reduce_49( val, _values, result )
 result = []
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 274
  def _reduce_50( val, _values, result )
 result <<= val[1]
   result
  end
.,.,

 # reduce 51 omitted

 # reduce 52 omitted

 # reduce 53 omitted

 # reduce 54 omitted

 # reduce 55 omitted

 # reduce 56 omitted

 # reduce 57 omitted

 # reduce 58 omitted

 # reduce 59 omitted

 # reduce 60 omitted

 # reduce 61 omitted

 # reduce 62 omitted

module_eval <<'.,.,', 'compile.y', 294
  def _reduce_63( val, _values, result )
                   result = AddRegionNode.new(@line_num, val[1], val[3])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 299
  def _reduce_64( val, _values, result )
                   parse_error "`;' expected."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 303
  def _reduce_65( val, _values, result )
                   parse_error "`}' expected after points."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 307
  def _reduce_66( val, _values, result )
                   parse_error "points expected after `{'."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 311
  def _reduce_67( val, _values, result )
                   parse_error "`{' expected after region name."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 315
  def _reduce_68( val, _values, result )
                   parse_error "region name expected."
   result
  end
.,.,

 # reduce 69 omitted

module_eval <<'.,.,', 'compile.y', 321
  def _reduce_70( val, _values, result )
 result += val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 325
  def _reduce_71( val, _values, result )
 result = [ val[0], val[2] ]
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 329
  def _reduce_72( val, _values, result )
                   parse_error "integer expected after `,'."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 333
  def _reduce_73( val, _values, result )
                   parse_error "even number of integers expected."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 340
  def _reduce_74( val, _values, result )
                 result = AsmNode.new(@line_num, val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 344
  def _reduce_75( val, _values, result )
                 result = ValueNode.new(@line_num, val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 348
  def _reduce_76( val, _values, result )
                 result = AsmSymNode.new(@line_num, val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 352
  def _reduce_77( val, _values, result )
                 result = AsmExprNode.new(@line_num, val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 357
  def _reduce_78( val, _values, result )
                 parse_error "`;' expected."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 361
  def _reduce_79( val, _values, result )
                 parse_error "`)' expected after integer."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 365
  def _reduce_80( val, _values, result )
                 parse_error "integer expected after `('."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 369
  def _reduce_81( val, _values, result )
                 parse_error "`(' expected after `asm'."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 373
  def _reduce_82( val, _values, result )
                 parse_error "`;' expected."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 377
  def _reduce_83( val, _values, result )
                 parse_error "`)' expected after value."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 381
  def _reduce_84( val, _values, result )
                 parse_error "value expected after `('."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 385
  def _reduce_85( val, _values, result )
                 parse_error "`(' expected after `asm_push_value'."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 389
  def _reduce_86( val, _values, result )
                 parse_error "`;' expected."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 393
  def _reduce_87( val, _values, result )
                 parse_error "`)' expected after integer."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 397
  def _reduce_88( val, _values, result )
                 parse_error "integer expected after `('."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 401
  def _reduce_89( val, _values, result )
                 parse_error "`(' expected after `asm_push_symbol'."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 405
  def _reduce_90( val, _values, result )
                 parse_error "`;' expected."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 409
  def _reduce_91( val, _values, result )
                 parse_error "`)' expected after expression."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 413
  def _reduce_92( val, _values, result )
                 parse_error "expression expected after `('."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 417
  def _reduce_93( val, _values, result )
                 parse_error "`(' expected after `asm_expr'."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 424
  def _reduce_94( val, _values, result )
                   result = StoreNode.new(@line_num, val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 429
  def _reduce_95( val, _values, result )
                   parse_error "`;' expected."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 433
  def _reduce_96( val, _values, result )
                   parse_error "expression expected after `:='."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 440
  def _reduce_97( val, _values, result )
                 result = CallStmtProcedureNode.new(@line_num, val[1], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 445
  def _reduce_98( val, _values, result )
                 parse_error "`;' expected."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 449
  def _reduce_99( val, _values, result )
                 parse_error "`(' expected after `#{val[1]}'."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 453
  def _reduce_100( val, _values, result )
                 parse_error "procedure name expected after `call'."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 460
  def _reduce_101( val, _values, result )
                   result = CallInNode.new(@line_num, val[1], val[3])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 465
  def _reduce_102( val, _values, result )
                   parse_error "arguments not allowed with `call in' statement."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 469
  def _reduce_103( val, _values, result )
                   parse_error "`;' expected."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 473
  def _reduce_104( val, _values, result )
                   parse_error "value expected after `in'."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 480
  def _reduce_105( val, _values, result )
                   result = CallWhenNode.new(@line_num, val[1], val[3])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 485
  def _reduce_106( val, _values, result )
                   parse_error "arguments not allowed with `call when' " +
                               "statement."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 490
  def _reduce_107( val, _values, result )
                   parse_error "`;' expected."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 494
  def _reduce_108( val, _values, result )
                   parse_error "expression expected after `when'."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 501
  def _reduce_109( val, _values, result )
                   result = IfNode.new(@line_num, val[2], val[5])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 506
  def _reduce_110( val, _values, result )
                   parse_error "`then' expected after `)'."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 510
  def _reduce_111( val, _values, result )
                   parse_error "`)' expected after expression."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 514
  def _reduce_112( val, _values, result )
                   parse_error "expression expected after `('."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 518
  def _reduce_113( val, _values, result )
                   parse_error "`(' expected after `if'."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 525
  def _reduce_114( val, _values, result )
                   result = IfNode.new(@line_num, val[2], val[5], val[7])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 532
  def _reduce_115( val, _values, result )
                 result = VoidNode.new(@line_num, val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 537
  def _reduce_116( val, _values, result )
                 parse_error "`;' expected."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 544
  def _reduce_117( val, _values, result )
                 result = OpStmtProcedureNode.new(@line_num, val[0], val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 549
  def _reduce_118( val, _values, result )
                 parse_error "`;' expected."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 556
  def _reduce_119( val, _values, result )
                   result = ReturnNode.new(@line_num, val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 561
  def _reduce_120( val, _values, result )
                   parse_error "`)' expected after expression."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 565
  def _reduce_121( val, _values, result )
                   parse_error "value expected after `('."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 569
  def _reduce_122( val, _values, result )
                   parse_error "`(' expected after `return'."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 576
  def _reduce_123( val, _values, result )
                   result = WhileNode.new(@line_num, val[2], val[5])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 581
  def _reduce_124( val, _values, result )
                   parse_error "`do' expected after `)'."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 585
  def _reduce_125( val, _values, result )
                   parse_error "`)' expected after expression."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 589
  def _reduce_126( val, _values, result )
                   parse_error "expression expected after `('."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 593
  def _reduce_127( val, _values, result )
                   parse_error "`(' expected after `while'."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 600
  def _reduce_128( val, _values, result )
 result = [ val[0] ]
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 601
  def _reduce_129( val, _values, result )
 result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 606
  def _reduce_130( val, _values, result )
 result = []
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 607
  def _reduce_131( val, _values, result )
 result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 611
  def _reduce_132( val, _values, result )
                 parse_error "argument expected after `('."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 616
  def _reduce_133( val, _values, result )
 result = [ val[0] ]
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 617
  def _reduce_134( val, _values, result )
 result = result.push(val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 621
  def _reduce_135( val, _values, result )
                 parse_error "argument expected after comma."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 628
  def _reduce_136( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 629
  def _reduce_137( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 630
  def _reduce_138( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 631
  def _reduce_139( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 634
  def _reduce_140( val, _values, result )
                 result = ValueNode.new(@line_num, val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 638
  def _reduce_141( val, _values, result )
                 result = FetchNode.new(@line_num, val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 642
  def _reduce_142( val, _values, result )
                 result = LogicalNotNode.new(@line_num, val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 646
  def _reduce_143( val, _values, result )
                 result = BitwiseNotNode.new(@line_num, val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 650
  def _reduce_144( val, _values, result )
                 result = UminusNode.new(@line_num, val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 652
  def _reduce_145( val, _values, result )
 result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 656
  def _reduce_146( val, _values, result )
                 parse_error "missing `)'."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 661
  def _reduce_147( val, _values, result )
 result = InfixNode.new(@line_num, 0x8033, val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 662
  def _reduce_148( val, _values, result )
 result = InfixNode.new(@line_num, 0x8034, val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 663
  def _reduce_149( val, _values, result )
 result = InfixNode.new(@line_num, 0x8035, val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 664
  def _reduce_150( val, _values, result )
 result = InfixNode.new(@line_num, 0x8036, val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 665
  def _reduce_151( val, _values, result )
 result = InfixNode.new(@line_num, 0x8037, val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 666
  def _reduce_152( val, _values, result )
 result = InfixNode.new(@line_num, 0x8038, val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 667
  def _reduce_153( val, _values, result )
 result = InfixNode.new(@line_num, 0x8039, val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 668
  def _reduce_154( val, _values, result )
 result = InfixNode.new(@line_num, 0x803a, val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 669
  def _reduce_155( val, _values, result )
 result = InfixNode.new(@line_num, 0x803b, val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 670
  def _reduce_156( val, _values, result )
 result = InfixNode.new(@line_num, 0x803c, val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 671
  def _reduce_157( val, _values, result )
 result = InfixNode.new(@line_num, 0x803d, val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 672
  def _reduce_158( val, _values, result )
 result = InfixNode.new(@line_num, 0x803e, val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 673
  def _reduce_159( val, _values, result )
 result = InfixNode.new(@line_num, 0x803f, val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 674
  def _reduce_160( val, _values, result )
 result = InfixNode.new(@line_num, 0x8040, val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 675
  def _reduce_161( val, _values, result )
 result = InfixNode.new(@line_num, 0x8041, val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 676
  def _reduce_162( val, _values, result )
 result = InfixNode.new(@line_num, 0x8042, val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 679
  def _reduce_163( val, _values, result )
                 parse_error "expression expected after `#{val[1]}'."
   result
  end
.,.,

 # reduce 164 omitted

 # reduce 165 omitted

 # reduce 166 omitted

 # reduce 167 omitted

 # reduce 168 omitted

 # reduce 169 omitted

 # reduce 170 omitted

 # reduce 171 omitted

 # reduce 172 omitted

 # reduce 173 omitted

 # reduce 174 omitted

 # reduce 175 omitted

 # reduce 176 omitted

 # reduce 177 omitted

 # reduce 178 omitted

 # reduce 179 omitted

module_eval <<'.,.,', 'compile.y', 688
  def _reduce_180( val, _values, result )
                 result = ExprProcedureNode.new(@line_num, val[0], val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 695
  def _reduce_181( val, _values, result )
                 result = IndirectCallProcedureNode.new(@line_num, val[2],
                                                        val[4])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 701
  def _reduce_182( val, _values, result )
                 parse_error "`(' expected after `}'."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 705
  def _reduce_183( val, _values, result )
                 parse_error "`}' expected after expression."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 709
  def _reduce_184( val, _values, result )
                 parse_error "expression expected after `{'."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 713
  def _reduce_185( val, _values, result )
                 parse_error "`{' expected after `$'."
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 720
  def _reduce_186( val, _values, result )
                 result = ProcedureNumberNode.new(@line_num, val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'compile.y', 725
  def _reduce_187( val, _values, result )
                 parse_error "procedure name expected after `@'."
   result
  end
.,.,

 # reduce 188 omitted

 # reduce 189 omitted

module_eval <<'.,.,', 'compile.y', 732
  def _reduce_190( val, _values, result )
 @compiler.add_string(val[0])
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

end   # class ScriptParser


if $0 == __FILE__ then
  require 'getoptlong'

  # Prints usage message and exits
  def usage(exit_val = 0)
    $stderr.puts <<'END_USAGE'
compile - Compiles ssl files (script format in Fallout1 and Fallout2)
          to int compiled format.
Usage: compile [OPTION]... [FILE]...
Options:

Script file options:
  --fallout1                 specify SSL file is of type Fallout 1
  --fallout2                 specify SSL file is of type Fallout 2 (default)

Informative output:
  -v, --verbose              print more information
  -h, --help                 display this help and exit
  -V, --version              output version information and exit

FILE                         file(s) to compile.  may use wildcards.
END_USAGE
    exit(exit_val)
  end

  # Processes command line options, setting appropriate fields
  def process_options
    usage() if ARGV.length.zero?

    opts = GetoptLong.new(
      [ "--fallout1",                    GetoptLong::NO_ARGUMENT ],
      [ "--fallout2",                    GetoptLong::NO_ARGUMENT ],
      [ "--verbose", "-v",               GetoptLong::NO_ARGUMENT ],
      [ "--help",   "-h",                GetoptLong::NO_ARGUMENT ],
      [ "--version", "-V",               GetoptLong::NO_ARGUMENT ]
    )

    opts.quiet = true
    begin
      fallout1 = fallout2 = verbose = false

      opts.each do |opt, arg|
        case(opt)
        when "--fallout1"    ; fallout1    = true
        when "--fallout2"    ; fallout2    = true
        when "--verbose"     ; verbose     = true
        when "--help"        ; usage()
        when "--version"     ; puts "compile 1.01" ; exit(0)
        end
      end

      if fallout1 and fallout2
        $stderr.puts "can not specify both --fallout1 and --fallout2"
        usage(1)
      end

      if fallout1
        $stderr.puts "fallout1 not supported yet."
        exit(1)
      end

      @fallout_version = 1 if fallout1
      @fallout_version = 2 if fallout2
      @verbose = true      if verbose
    rescue GetoptLong::InvalidOption
      $stderr.puts $!
      usage(1)
    end
  end


  #
  # Begin processing
  #

  @fallout_version = 2
  @verbose = false
  process_options()

  # get list of files to process, expanding globs
  files = []
  ARGV.each { |arg| files.concat Dir::glob(arg) }

  parser = ScriptParser.new

  # compile each file
  files.each do |name|
    begin
      if name =~ /ssl$/
        out_name = name.sub(/ssl$/, "int")
      else
        out_name = name + ".int"
      end

      puts "compiling #{name} => #{out_name}" if @verbose

      lines = nil
      File.open(name, "rb") { |io| lines = io.readlines() }

      parser.parse(lines, @fallout_version)

      io = File.new(out_name, "wb")
      parser.write(io)
      io.close
    rescue
      $stderr.puts "Error compiling `#{name}': " + $!
    end
  end
end
